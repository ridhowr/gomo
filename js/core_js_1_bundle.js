!function(t){var e={};function n(a){if(e[a])return e[a].exports;var r=e[a]={i:a,l:!1,exports:{}};return t[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,a){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(a,r,function(e){return t[e]}.bind(null,r));return a},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e){t.exports=function(t){function e(t){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",t)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(t):"undefined"!=typeof eval?eval.call(null,t):e("EvalError: No eval function available")}catch(t){e(t)}}},,,function(t,e,n){"use strict";n.r(e);n(4),n(6),n(8),n(10)},function(t,e,n){n(0)(n(5))},function(t,e){t.exports="/* \n * BOOTLOADER CONFIG\n */\n\n\n/* BOOTLOADER CONFIG */\nvar BOO_DEVELOPER_MODE = false;\nvar BOO_SDK_MODE = false;\nvar BOO_DEBUG_MODE = true;\nvar BOO_CHECK_BACKUP_DATA = true;\nvar BOO_FORCE_WHITELIST_ESCAPING = false;\n// Used by MASTER_IO_CONTROLLER to set the auto-listings refresh interval\nvar INT_LISTINGS_REFRESH_INTERVAL = (1000 * 60) * 5;"},function(t,e,n){n(0)(n(7))},function(t,e){t.exports="/* global OBJ_PRELOADED_DATA, CORE, CONTENT_TRACKING, MANIFEST_MANAGER, OBJ_REF, SECTION_MANAGER\nVARIABLES_HOLDER, booIsIE8, svg4everybody, EM, BOO_SHOW_LAST_LOCATION, LogManager\nglobal, LOCATION_TRACKING_CONFIG, CONTENT_TRACKING_CONFIG, TEMPLATE_MANANGER\nMATCH_COLUMN_HEIGHT, $, LOCALISER, DEBUG, BOO_PRETEND_TO_BE_SMARTPHONE_PHONE\nBOO_DEVELOPER_MODE, head, BOO_PRETEND_TO_BE_TABLET, SWIPE_CONTROL, NAVIGATION_SVG_ICONS\nOUTPUT_MODE_CHECKER, BOO_ANIMATE_BASE_BACKGROUND, NavigationProxy, Modernizr, GOMO_PREVIEW\nOBJ_NAV_BUTTONS, LOCALISED_DATA, PATH_MANAGER, PREVIEW_DATA */\n/* eslint-disable no-extend-native, no-inner-declarations, require-jsdoc */\n\n/**\n * @title Loader\n * @description The loader object is responsible for loading all JS files and CSS files (via headjs)\n * and also tie's into the master_server_io JSON loading.\n *\n *\n * @author JohnC\n * @version 0.1 15/09/13\n */\nvar LOADER = {\n  strObjID: 'The loading manager',\n\n  // Event manager isn't loaded to begin with\n  _booRegisteredWithEventManager: false,\n\n  _strCurrLoadSequenceTitle: '',\n  _intLoadSequencePhase: -1,\n  _intTotalLoadsCompleted: -1,\n  _intMaxLoads: 35, // Safe guard against recursion, could be increased if required\n\n  // The current load sequence being processed.\n  _arrCurrLoadSequence: [],\n\n  _objFilePathsLoaded: {},\n\n  _strManifestLoadPatternID: 'manifests',\n\n  _intCurrBatchTotalLoaded: 0,\n  _intCurrBatchTotalToExpect: 0,\n  intCssFileCount: 0,\n\n  _strPortalJSONHandler: 'data_handler.php',\n\n  _booDebugMessages: false,\n  _booShowLastLocationMessage: true,\n\n  _booLoadHTMLFragments: true,\n\n  booLoadSequenceComplete: false,\n\n  _strIframeWrapperID: 'htmlFragmentLoaderIFrameWrapperL',\n  _strIframeTemplateID: 'htmlFragmentLoaderIFrame_XX_FRAGMENT_ID_XX_L',\n\n  _objFallbackHTMLCollection: {},\n\n  _strDataPath: '',\n  previewMode: false,\n\n  init: function() {\n    window['LOCALISED_DATA'] = {};\n    window['CURRENT_LOCALISED_DATA'] = {};\n\n    // Set Array indexOf if doesn't exisit - known IE8 problem\n    if (!Array.prototype.indexOf) {\n      Array.prototype.indexOf = function(obj, start) {\n        for (var i = (start || 0), j = this.length; i < j; i++) {\n          if (this[i] === obj) {\n            return i;\n          }\n        }\n        return -1;\n      };\n    }\n\n    window.addEventListener('message', function() {\n      if (event.data && event.data.name) {\n        switch (event.data.name) {\n          case 'reportHTMLFragmentLoaded':\n            LOADER.reportHTMLFragmentLoaded(event.data.content);\n            break;\n          case 'reportHandlebarsHTMLFragmentLoaded':\n            LOADER.reportHandlebarsHTMLFragmentLoaded(event.data.content, event.data.ids);\n            break;\n          default:\n            console.log('PostMessage not registered in the player ' + event.data);\n        }\n      }\n    });\n  },\n\n  handleEvent_localisationLoaded: function() {\n    window['CURRENT_LOCALISED_DATA'] = LOCALISED_DATA;\n  },\n\n  handleEvent_loaderXHRRequestCompleted: function(_objWhatXHRData) {\n    LOADER._progressLoadedCount();\n  },\n\n  handleEvent_purgeHTMLIframes: function() {\n    var _domIFrameWrapper = this._getWrapperReference();\n    _domIFrameWrapper.innerHTML = '';\n  },\n\n  handleEvent_gomoCoreAndDataLoaded: function() {\n    // LOAD CORE FILES\n    for (var _strPreloadedDataItem in OBJ_PRELOADED_DATA) {\n      // Don't load topics until required\n      if (_strPreloadedDataItem.indexOf('content_') != 1) {\n        CORE.addData(OBJ_PRELOADED_DATA[_strPreloadedDataItem], _strPreloadedDataItem);\n      }\n    }\n\n    // Set the CORE booLoader for reloading on orientation change\n    CORE._booLoadCompleted = true;\n\n    // Register phantomJs events if we're running from screenshot server\n    if (typeof registerPhantomEvents !== 'undefined') {\n      registerPhantomEvents(); // eslint-disable-line no-undef\n    }\n\n    // Set default language\n    gomo.translationManager.setLocalisation();\n  },\n\n  handleEvent_gomoSecondaryFilesLoaded: function() {\n    // Load the svg spritesheet if we have one\n    if (typeof NAVIGATION_SVG_ICONS === 'undefined' || !NAVIGATION_SVG_ICONS) {\n      NavigationProxy.init(null);\n    } else {\n      var svgUrl = 'resources/svg_icons/svg_spritesheet.svg';\n      $.get(svgUrl, null, null, 'html')\n        .done(function(responseText) {\n          NavigationProxy.init(responseText);\n        })\n        .fail(function(e) {\n          if (global.LogManager) {\n            var errorMessage =\n              e.responseText || 'error response. LOADER.handleEvent_gomoTertiaryFilesLoaded()';\n            global.LogManager.add('WARN', errorMessage);\n          }\n        });\n    }\n  },\n\n  handleEvent_loadSequenceCompleted: function() {\n    var me = this;\n    me._debug('All Files loaded .handleEvent_gomoPlayerDataLoaded(), loader.js', 'INFO');\n    me._allFilesLoadedPrimaryStart();\n\n    // Configure dataStorage...\n    gomo.dataStorage.config({user: 'all'});\n\n    // Location tracking...\n    var trackLocation = me.getLocationTrackingConfig();\n    if (trackLocation && gomo.geoLocation) {\n      gomo.geoLocation.init({\n        success: function(loc) {\n          // Go set the she GEOJSON\n          var geoJSON = gomo.geoLocation.geoJSON();\n          CONTENT_TRACKING.setGeoJSON(geoJSON);\n        },\n        error: function() {\n          console.log('Error locating...');\n        }\n      });\n    }\n\n    // Initialise the tracking adapters!\n    var config = me.getContentTrackingConfig();\n    CONTENT_TRACKING.init(config);\n\n    var trackingPreferences = MANIFEST_MANAGER.trackingPreferences;\n\n    CONTENT_TRACKING.getLastLocation({\n      success: function(lastLocation) {\n        // CORE.startupPopup = function(){\n        if (lastLocation && lastLocation.topicId && !me._booLastPageShown) {\n          // Now ask the user...\n          var topicID = lastLocation.topicId;\n          var topic = OBJ_REF.get(topicID);\n\n          function finaliseLocation() {\n            var showLastLocation = function() {\n              me._booShowLastLocationMessage = (typeof BOO_SHOW_LAST_LOCATION !== 'undefined' ?\n                BOO_SHOW_LAST_LOCATION : me._booShowLastLocationMessage);\n              return me._booShowLastLocationMessage;\n            };\n            if (showLastLocation() && topic && !SECTION_MANAGER.isMenuTopic(topic)) {\n              EM.trigger(\n                'popupButtonClicked', {\n                  'strPopupID': 'lastPageVisited',\n                  'objLocationData': lastLocation,\n                  '_objActionData': {}\n                }\n              );\n              me._booLastPageShown = true;\n            }\n          }\n\n          var timer = null;\n          function startChecking() {\n            if (!CORE.booFirstCourseScreenDisplayed) {\n              timer = setTimeout(function() {\n                startChecking();\n              }, 200);\n            } else {\n              clearTimeout(timer);\n              finaliseLocation();\n            }\n          }\n\n          if (me._booShowLastLocationMessage) {\n            startChecking();\n          }\n        }\n        // }\n      }\n    });\n\n    CONTENT_TRACKING.prestart()\n      .then(function() {\n        // Start the content tracking. This will load user data which may prompt\n        // for user input so we need a promise triggered before continuing\n        return CONTENT_TRACKING.start({\n          id: CORE.objCourseData.strObjID,\n          name: CORE.objCourseData.objRawData.title,\n          description: CORE.objCourseData.objRawData.description,\n          preferences: trackingPreferences\n        }, {\n          success: function() {\n            // Load the learning objectives\n            if (gomo.learningObjectivesManager) {\n              gomo.learningObjectivesManager.init();\n            }\n\n            // Trigger tracking started event\n            EM.trigger('startedTracking');\n          },\n          error: function() {\n            console.log('Unable to start tracking...');\n\n            // Load the learning objectives even if the the content\n            // tracking fails to start, we may have assets using them\n            if (gomo.learningObjectivesManager) {\n              gomo.learningObjectivesManager.init();\n            }\n          }\n        });\n      })\n      .then(function() {\n        // Now the user is setup we can setup logging\n        if (typeof LogManager !== 'undefined') {\n          LogManager.setLogMessageData();\n\n          // If we're in the portal preview mode, log the session loading\n          var _strLocationSearch = window.location.search;\n          if (_strLocationSearch.indexOf('gomoPreview=true') > -1 &&\n            _strLocationSearch.indexOf('sharelink=true') > -1) {\n            global.LogManager.add('TEXT', 'Player Session Loaded from Sharelink');\n          }\n        }\n\n        // Set language as a variable\n        if (VARIABLES_HOLDER && gomo.translationManager && gomo.translationManager.langCode) {\n          VARIABLES_HOLDER.setActiveLanguage(gomo.translationManager.langCode);\n        }\n\n        // Load the learning objectives\n        if (!CONTENT_TRACKING.initialised && gomo.learningObjectivesManager) {\n          gomo.learningObjectivesManager.init();\n        }\n\n        // Load Topic now tracking data is up-to-date\n        me._allFilesLoadedSecondaryStart();\n      });\n  },\n\n  handleEvent_frameworksLoaded: function() {\n    if (Modernizr) {\n      Modernizr.addTest(\n        'boxdecorationbreak',\n        Modernizr.testAllProps('boxDecorationBreak', 'slice')\n      );\n    }\n    // Init SVG with PNG fallback for IE8\n    LEGACY_SUPPORT = true; // eslint-disable-line no-undef\n    if (booIsIE8()) {\n      var svgFileName = 'svg_spritesheet.svg#';\n      svg4everybody({\n        fallback: function(src, svg, use) {\n          var pngPath = src.replace(svgFileName, '');\n          pngPath = pngPath+'.png';\n          return pngPath;\n        }\n      });\n    }\n  },\n\n  getLocationTrackingConfig: function() {\n    var enabled = false;\n    // Get the config from player config...\n\n    var config = null;\n    var queryConfig = LOADER.getURLConfig('lt');\n    if ('LOCATION_TRACKING_CONFIG' in window) {\n      config = LOCATION_TRACKING_CONFIG || null;\n    }\n\n    if (config && config.enabled && !queryConfig) {\n      enabled = true;\n    }\n\n    if (queryConfig && queryConfig.enabled) {\n      enabled = true;\n    }\n\n    return enabled;\n  },\n\n  getContentTrackingConfig: function() {\n    // Get the config from player config...\n    var playerConfig = CONTENT_TRACKING_CONFIG;\n    var queryConfig = null;\n    // Get the query string...\n    var queryString = window.location.search.substring(1);\n    var params = queryString.split('&');\n\n    var hasXAPIParams = false;\n\n    // Get the query parameters\n    for (var i=0; i<params.length; i++) {\n      var paramName = params[i].split('=');\n      if (paramName.length > 0) {\n        var paramValue = paramName[1];\n        // Get the parameter name\n        // and test first character for ?\n        paramName = paramName[0];\n        paramName = paramName[0] == '?' ? paramName.substr(1) : paramName;\n\n        // Check for xapi params and add the values...\n        if (paramName == 'endpoint') {\n          hasXAPIParams = true;\n        } else if (paramName == 'ct') {\n          // Check the gomo ContentTracking param\n          paramValue = decodeURIComponent(paramValue);\n          try {\n            queryConfig = JSON.parse(paramValue);\n          } catch (e) {\n            // ...\n          }\n        }\n      }\n    }\n\n    // Create config\n    var config = playerConfig;\n\n    // Check if we have xAPI query values...\n    if (queryConfig) {\n      config.enabled = (queryConfig.enabled == undefined ?\n        config.enabled : queryConfig.enabled) || false;\n      config.pollingInterval = (queryConfig.pollingInterval == undefined ?\n        config.pollingInterval : queryConfig.pollingInterval) || 0;\n      config.stores = (queryConfig.stores == undefined ? config.stores : queryConfig.stores) || [];\n    }\n\n    if (hasXAPIParams) {\n      config.enabled = true;\n      config.pollingInterval = config.pollingInterval || 60000;\n      config.stores = Array.isArray(config.stores) ? config.stores : [];\n      config.stores.push({\n        adapter: 'tincan',\n        version: '1.0.0'\n      });\n    }\n\n    return config;\n  },\n\n  getURLConfig: function(paramName) {\n    var queryConfig = null;\n    var queryString = window.location.search.substring(1);\n    var params = queryString.split('&');\n    // Loop all params\n    for (var i=0; i < params.length; i++) {\n      var config = params[i].split('=');\n      if (config.length > 0 && config[0] == paramName) {\n        config = config[1];\n        config = decodeURIComponent(config);\n        try {\n          queryConfig = JSON.parse(config);\n        } catch (e) {\n          // ...\n        }\n      }\n    }\n    return queryConfig;\n  },\n\n  startLoadSequence: function(_arrWhatLoadSequence) {\n    // Set global console if it doesn't exist to capture IE8 and IE9 errors\n    if (typeof console === 'undefined') {\n      window.console = {'log': function() {}};\n    }\n\n    this._arrCurrLoadSequence = _arrWhatLoadSequence;\n    this._registerWithEventManager();\n    this._processNextLoadArray();\n  },\n\n  reportHeadItemLoaded: function() {\n    LOADER._progressLoadedCount();\n  },\n\n  reportHTMLFragmentLoaded: function(templates) {\n    if (templates) {\n      // The template files aren't parsed so we need to do that first to stop jQuery erroring\n      templates = templates.replace('\x3c!--', '');\n      templates = templates.replace('--\x3e', '');\n      var templateElements = $.parseHTML(templates);\n      templateElements = $(templateElements);\n      if (window['TEMPLATE_MANANGER'] &&\n        window['TEMPLATE_MANANGER']['collectTemplatesFromFragment']) {\n        TEMPLATE_MANANGER.collectTemplatesFromFragment(templateElements);\n      }\n    }\n    LOADER._progressLoadedCount();\n  },\n\n  reportHandlebarsHTMLFragmentLoaded: function(templates, fragmentIds) {\n    if (templates) {\n      // The template files aren't parsed so we need to do that first to stop jQuery erroring\n      var templateElements = $.parseHTML(templates);\n      templateElements = $(templateElements);\n      this._debug('Recieved NEW fragment type for \\'' + fragmentIds +\n        '\\'. .reportHTMLFragmentLoaded(), loader.js', 'INFO');\n      if (window.gomo && window.gomo.templateManager) {\n        fragmentIds.forEach(function(item) {\n          gomo.templateManager.setTemplate(templateElements, item);\n        });\n      }\n    }\n    LOADER._progressLoadedCount();\n  },\n\n  loadTopicData: function(_strTopicId) {\n    if (!OBJ_PRELOADED_DATA[_strTopicId]) {\n      return false;\n    }\n    return OBJ_PRELOADED_DATA[_strTopicId];\n  },\n\n  _processNextLoadArray: function() {\n    this._intLoadSequencePhase++;\n    this._intTotalLoadsCompleted++;\n\n    if (this._intTotalLoadsCompleted == this._intMaxLoads) {\n      this._debug('ERROR: The maximum number of loads has been reached; something has gone wrong! LOADER._processNextLoadArray(), loader.js'); // eslint-disable-line max-len\n      return;\n    }\n\n    var _objLoadSequenceData = this._arrCurrLoadSequence[this._intLoadSequencePhase];\n\n    if (_objLoadSequenceData) {\n      var _objNextFileListData = _objLoadSequenceData['objLoadData'];\n      this._strCurrLoadSequenceTitle = _objLoadSequenceData['strTitle'];\n      this._debug('STARTED loading items for \\'' + this._strCurrLoadSequenceTitle +\n        '\\', LOADER._processNextLoadArray(), loader.js', 'INFO');\n\n      var _arrNextFileList = _objNextFileListData['arrFileList'];\n      // If it's a empty array, skip on.\n      if (_arrNextFileList.length == 0) {\n        this._debug('SKIPPING onto the next item as no items found for \\'' +\n          this._strCurrLoadSequenceTitle + '\\'. LOADER._processNextLoadArray(), loader.js', 'INFO');\n        this._updateLoadState();\n        this._triggerLoadCompletionEvents(_objNextFileListData['arrCompletionEvents'], false);\n        this._processNextLoadArray();\n        return;\n      }\n\n      this._intCurrBatchTotalLoaded = 0;\n      this._intCurrBatchTotalToExpect = _arrNextFileList.length;\n\n      var count = 0;\n      while (count < _arrNextFileList.length) {\n        var _objCurrFileData = _arrNextFileList[count];\n        this._debug('LOADING FILE ' + _objCurrFileData.strFile);\n        // Prevents files being processed twice when the manifests are re-checked.\n        // Also check the Conditional Loader if one exists\n        if (!_objCurrFileData['booLoadRequested'] &&\n          (typeof _objCurrFileData['funBooConditionalLoader'] === 'undefined' ||\n          _objCurrFileData.funBooConditionalLoader() == true)) {\n          this._routeLoadRequest(_objCurrFileData, count);\n        } else {\n          var booItemLoaded = false;\n          var booItemIgnored = false;\n          if ( _objCurrFileData.funBooConditionalLoader() == false ) {\n            booItemIgnored = true;\n          }\n          var strItemPath = _objCurrFileData.strFile;\n          this._progressLoadedCount(booItemLoaded, booItemIgnored, strItemPath);\n        }\n        count++;\n      }\n    } else {\n      this._debug('All loading done.', 'INFO');\n    }\n  },\n\n  _progressLoadedCount: function(booItemLoaded, booItemIgnored, strItemPath) {\n    this._intCurrBatchTotalLoaded++;\n    if (booItemLoaded == false && booItemIgnored == false) {\n      this._debug('Item ' + strItemPath + ' NOT loaded, now on \\'' +\n        this._intCurrBatchTotalLoaded + '\\' of \\'' + this._intCurrBatchTotalToExpect +\n        '\\', LOADER._progressLoadedCount(), loader.js', 'WARNING');\n    } else if (booItemIgnored == false) {\n      this._debug('Item loaded, now on \\'' + this._intCurrBatchTotalLoaded + '\\' of \\'' +\n        this._intCurrBatchTotalToExpect + '\\', LOADER._progressLoadedCount(), loader.js', 'INFO');\n    }\n    if (this._intCurrBatchTotalLoaded == this._intCurrBatchTotalToExpect) {\n      this._debug('COMPLETED loading items for \\'' + this._strCurrLoadSequenceTitle +\n        '\\', LOADER._progressLoadedCount(), loader.js', 'INFO');\n      this._updateLoadState();\n\n      var _objLoadSequenceData = this._arrCurrLoadSequence[this._intLoadSequencePhase];\n      var _objCurrFileListData = _objLoadSequenceData['objLoadData'];\n\n      this._triggerLoadCompletionEvents(_objCurrFileListData['arrCompletionEvents'], true);\n\n      this._processNextLoadArray();\n    }\n  },\n\n  _routeLoadRequest: function(_objWhatLoadRequest, _intLoadBatchIndex) {\n    var _strFilePath;\n    switch (_objWhatLoadRequest['strType']) {\n      case 'base':\n        if (_objWhatLoadRequest['strFile'].indexOf('.js') > -1) {\n          _strFilePath = 'js/' + _objWhatLoadRequest['strFile'];\n          this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        } else if (_objWhatLoadRequest['strFile'].indexOf('.css') > -1) {\n          this.intCssFileCount++;\n          _strFilePath = 'css/' + _objWhatLoadRequest['strFile'];\n          this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        } else {\n          this._debug('ERROR: Unknown file extentsion, neither .css or .js found in LOADER._routeLoadRequest(), loader.js'); // eslint-disable-line max-len\n        }\n        break;\n      case 'base-payload-head':\n        _strFilePath = _objWhatLoadRequest['strFile'];\n        this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        break;\n      case 'base-payload-html':\n        _strFilePath = _objWhatLoadRequest['strFile'];\n        this._loadHTMLFragment(_strFilePath, _intLoadBatchIndex);\n        break;\n      case 'asset-manifest':\n        _strFilePath =\n          PATH_MANAGER.getPathToModules('modules/asset/' + _objWhatLoadRequest['strFile']);\n        this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        break;\n      case 'extra-manifest':\n        _strFilePath =\n          PATH_MANAGER.getPathToModules('modules/extra/' + _objWhatLoadRequest['strFile']);\n        this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        break;\n      case 'external-json':\n        this._loadExternalJSON(_objWhatLoadRequest);\n        break;\n      case 'model-manifest':\n        _strFilePath = 'modules/model/' + _objWhatLoadRequest['strFile'];\n        this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        break;\n      case 'theme':\n        _strFilePath = 'theme/' + _objWhatLoadRequest['strFile'];\n        this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        break;\n      case 'coreModules':\n        _strFilePath =\n          PATH_MANAGER.getPathToGlobalModules('modules/' + _objWhatLoadRequest['strFile']);\n        this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        break;\n      case 'customModules':\n        _strFilePath =\n          PATH_MANAGER.getPathToUserGroupModules('modules/' + _objWhatLoadRequest['strFile']);\n        this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        break;\n      case 'dependant-api':\n        _strFilePath = 'frameworks/' + _objWhatLoadRequest['strFile'];\n        this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        break;\n      case 'dependant-api-publish':\n        if (!BOO_DEVELOPER_MODE) {\n          _strFilePath = 'frameworks/' + _objWhatLoadRequest['strFile'];\n          this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        } else {\n          this._debug('ERROR: Trying to load \\'' + _strFilePath +\n            '\\' when in non-developer mode. See _routeLoadRequest(), loader.js');\n        }\n        break;\n      case 'dependant-api-develop':\n        if (BOO_DEVELOPER_MODE) {\n          _strFilePath = 'frameworks/' + _objWhatLoadRequest['strFile'];\n          this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        } else {\n          this._debug('ERROR: Trying to load \\'' + _strFilePath +\n            '\\' when in developer mode. See _routeLoadRequest(), loader.js');\n        }\n        break;\n      case 'test-player-data':\n        if (BOO_DEVELOPER_MODE) {\n          _strFilePath = 'test_data/' + _objWhatLoadRequest['strFile'];\n          this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        } else {\n          this._debug('ERROR: Trying to load \\'' + _strFilePath +\n            '\\' test data when not in developer mode. See _routeLoadRequest(), loader.js');\n        }\n        break;\n      case 'player-source':\n        _strFilePath = 'player/' + _objWhatLoadRequest['strFile'];\n        this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        break;\n      case 'player-data':\n        _strFilePath = PATH_MANAGER.getPathToData() + _objWhatLoadRequest['strFile'];\n        this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        break;\n\n      case 'preview-js-override':\n        if (this._loadPreviewBootEntries()) {\n          _strFilePath = 'preview/js/' + _objWhatLoadRequest['strFile'];\n          this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        } else {\n          this._progressLoadedCount(false, _strFilePath);\n        }\n        break;\n      case 'preview-css-override':\n        if (this._loadPreviewBootEntries()) {\n          this.intCssFileCount++;\n          _strFilePath = 'preview/css/' + _objWhatLoadRequest['strFile'];\n          this._loadViaHeadJS(_strFilePath, _intLoadBatchIndex);\n        } else {\n          this._progressLoadedCount(false, _strFilePath);\n        }\n        break;\n      case 'external':\n        // Directly Call external files\n        this._loadViaHeadJS(_objWhatLoadRequest['strFile'], _intLoadBatchIndex);\n        break;\n      case 'settings-json':\n        this._loadExternalSettings(_objWhatLoadRequest);\n        break;\n      case 'overrides-json':\n        this._loadExternalOverrides(_objWhatLoadRequest);\n        break;\n      default:\n        // TO LOCALISE\n        this._debug('Unknown load type of \\'' + _objWhatLoadRequest['strType'] +\n          '\\' found in _routeLoadRequest(), loader.js for file \\'' +\n          _objWhatLoadRequest['strFile'] + '\\'', 'ERROR');\n        break;\n    }\n\n    _objWhatLoadRequest['booLoadRequested'] = true;\n  },\n\n  // Loads JSON and creates a new entry into the _arrCurrLoadSequence for the required files.\n  _loadExternalJSON: function(objWhatLoadRequest) {\n    var strFilePath = objWhatLoadRequest.strFile;\n    var funBooConditionalLoader = objWhatLoadRequest.funBooConditionalLoader;\n    var completionEvents = objWhatLoadRequest.arrCompletionEvents || [];\n\n    $.getJSON(strFilePath, function(data) {\n      var jsonData = {\n        strTitle: 'external JSON',\n        strID: 'externalJSON',\n        objLoadData: {\n          arrCompletionEvents: completionEvents,\n          arrFileList: data.files\n        }\n      };\n\n      // The functions used for funBooConditionalLoader are in the boot.js and not the external\n      // JSON so write them here.\n      var count = 0;\n      while (count < jsonData.objLoadData.arrFileList.length) {\n        jsonData.objLoadData.arrFileList[count].funBooConditionalLoader = funBooConditionalLoader;\n        count++;\n      }\n      // Insert into the _arrCurrLoadSequence after the exteranl JSON file load.\n      LOADER._arrCurrLoadSequence.splice(LOADER._intLoadSequencePhase+1, 0, jsonData);\n      LOADER.reportHeadItemLoaded();\n    });\n  },\n\n  // Load the external settings file and apply settings.\n  _loadExternalSettings: function(objWhatLoadRequest) {\n    var strFilePath = objWhatLoadRequest.strFile;\n\n    $.getJSON(strFilePath, function(data) {\n      // Replace PROJECT_NAME and CACHE_CONTROL in index\n      document.title = data.projectName;\n      $('head').append('<meta http-equiv=\"CACHE-CONTROL\" content=\"'+data.cacheControl+'\"></meta>');\n      LOADER.reportHeadItemLoaded();\n    });\n  },\n\n  _loadExternalOverrides: function(objWhatLoadRequest) {\n    var strFilePath = objWhatLoadRequest.strFile;\n\n    $.getJSON(strFilePath, function(data) {\n      // Function to iterate object and set as global\n      var addGlobalObjs = function(found) {\n        for (var k in found) {\n          if (Object.prototype.hasOwnProperty.call(found, k)) {\n            window[k] = found[k];\n          }\n        }\n      };\n      // Set global theme variables\n      if (data.themeCustomisation) {\n        addGlobalObjs(data.themeCustomisation);\n      }\n      // Set global nav variables\n      if (data.nav) {\n        addGlobalObjs(data.nav);\n      }\n      // Set global publish settings\n      if (data.publishSettings) {\n        addGlobalObjs(data.publishSettings);\n      }\n      // Set global core webpackSettings\n      if (data.coreModulesWebpack) {\n        addGlobalObjs(data.coreModulesWebpack);\n      }\n      // Set global custom webpackSettings\n      if (data.customModulesWebpack) {\n        addGlobalObjs(data.customModulesWebpack);\n      }\n      // Set global nav button variables\n      if (data.disabledMetaTopics) {\n        var count = 0;\n        while (count < data.disabledMetaTopics.length) {\n          if (OBJ_NAV_BUTTONS &&\n            OBJ_NAV_BUTTONS[data.disabledMetaTopics[count]] &&\n            OBJ_NAV_BUTTONS[data.disabledMetaTopics[count]].booDefaultDisplayButton) {\n            OBJ_NAV_BUTTONS[data.disabledMetaTopics[count]].booDefaultDisplayButton = false;\n          }\n          count++;\n        }\n      }\n      LOADER.reportHeadItemLoaded();\n    })\n      .fail(function(response, textStatus, error) {\n        console.log('LOADER._loadExternalOverrides(): ' + textStatus + ', ' + error);\n        LOADER.reportHeadItemLoaded();\n      });\n  },\n\n  _loadViaHeadJS: function(_strFilePath, _intLoadBatchIndex) {\n    if (!this._objFilePathsLoaded[_strFilePath]) {\n      var booIsCssFile;\n      if (_strFilePath.indexOf('.css') > -1) {\n        booIsCssFile = true;\n      } else {\n        booIsCssFile = false;\n      }\n\n      var _strCurrOnReadyKey = 'loader_report_batch_' + this._intTotalLoadsCompleted +\n        '_entry_' + _intLoadBatchIndex;\n\n      if (booIsCssFile) {\n        this._loadCSS(_strFilePath, function() {\n          LOADER.reportHeadItemLoaded();\n        });\n      } else {\n        head.ready(_strCurrOnReadyKey, function() {\n          LOADER.reportHeadItemLoaded();\n        });\n      }\n\n      var _objHeadLoadRequest = {};\n      _objHeadLoadRequest[_strCurrOnReadyKey] = _strFilePath;\n\n      head.load(_objHeadLoadRequest);\n\n      this._objFilePathsLoaded[_strFilePath] = true;\n    } else {\n      this._debug('NOTIFICATION: A repeat request to load \\'' + _strFilePath +\n        '\\' was made, skipping request. _loadViaHeadJS(), loader.js');\n      this.reportHeadItemLoaded();\n    }\n  },\n\n  _loadCSS: function(strUrl, funCallback) {\n    if (typeof OUTPUT_MODE_CHECKER != 'undefined' &&\n      typeof OUTPUT_MODE_CHECKER.isAndroidDevice != 'undefined') {\n      if ( OUTPUT_MODE_CHECKER.isAndroidDevice() || OUTPUT_MODE_CHECKER.booIsFirefox() ) {\n        this._debug('Assume CSS loaded for Android 2.* as callbacks don\\'t work. LOADER._setCssCallback()\\'', 'WARNING'); // eslint-disable-line max-len\n        LOADER.reportHeadItemLoaded();\n      } else {\n        var img = document.createElement('img');\n        img.onerror = function() {\n          if (funCallback) {\n            funCallback();\n          }\n        };\n        img.src = strUrl;\n      }\n    } else {\n      this._debug('CSS loaded before OUTPUT_MODE_CHECKER. CSS loaded callback cannot be used. LOADER._setCssCallback()\\'', 'ERROR'); // eslint-disable-line max-len\n      // Assume CSS is loaded.\n      LOADER.reportHeadItemLoaded();\n    }\n  },\n\n  _loadHTMLFragment: function(_strFilePath, _intLoadBatchIndex) {\n    if (this._booLoadHTMLFragments) {\n      var _domIFrameWrapper = this._getWrapperReference(); // eslint-disable-line no-unused-vars\n      this._addHTMLFragmentLoaderIFrame(_strFilePath, _intLoadBatchIndex);\n    } else {\n      this._debug('NOTIFICATION: Skipping HTML fragment with the path of \\'' + _strFilePath +\n        ' as the loader is set to ignore\\'. _loadHTMLFragment(), loader.js');\n      this.reportHTMLFragmentLoaded(false);\n    }\n  },\n\n  _getWrapperReference: function() {\n    var _domWrapperElement = document.getElementById(this._strIframeWrapperID);\n    if (!_domWrapperElement) {\n      var _domBodyTag = document.getElementsByTagName('body')[0];\n      _domWrapperElement = document.createElement('div');\n      _domWrapperElement.id = this._strIframeWrapperID;\n\n\n      /*\n      // DEBUG settings\n      _domWrapperElement.style.position = \"absolute\";\n      _domWrapperElement.style.top = \"50px\";\n      _domWrapperElement.style.bottom = \"50px\";\n      _domWrapperElement.style.left = \"50px\";\n      _domWrapperElement.style.right = \"50px\";\n      _domWrapperElement.style.border = \"1px solid green\";\n      */\n\n      _domWrapperElement.style.position = 'absolute';\n      _domWrapperElement.style.top = '-50px';\n      _domWrapperElement.style.left = '-50px';\n      _domWrapperElement.style.width = '1px';\n      _domWrapperElement.style.height = '1px';\n      _domWrapperElement.style.overflow = 'hidden';\n\n      _domBodyTag.appendChild(_domWrapperElement);\n    }\n    return _domWrapperElement;\n  },\n\n  _addHTMLFragmentLoaderIFrame: function(_strFilePath, _intLoadBatchIndex) {\n    var _domWrapperElement = document.getElementById(this._strIframeWrapperID);\n    var _domIframeElement = document.createElement('iframe');\n\n    var _strIFrameID = this._strIframeTemplateID.replace('XX_FRAGMENT_ID_XX', _intLoadBatchIndex);\n    _domIframeElement.id = _strIFrameID;\n\n    /*\n    // DEBUG settings\n    _domIframeElement.style.width = \"50px\";\n    _domIframeElement.style.height = \"50px\";\n    _domIframeElement.style.margin = \"10px\";\n    _domIframeElement.style.border = \"1px dotted red\";\n    _domIframeElement.style.display = \"inline-block\";\n    */\n    _domIframeElement.style.width = '1px';\n    _domIframeElement.style.height = '1px';\n\n    _domIframeElement.src = _strFilePath;\n\n    _domWrapperElement.appendChild(_domIframeElement);\n  },\n\n  _registerWithEventManager: function() {\n    if (!this._booRegisteredWithEventManager) {\n      EM.register(this);\n      this._booRegisteredWithEventManager = true;\n    }\n  },\n\n  _updateLoadState: function() {\n    var _domLoadStateHolder = document.getElementById('loadProgressL');\n    if (_domLoadStateHolder) {\n      _domLoadStateHolder.innerHTML = 'Load sequence: ' + this._intLoadSequencePhase;\n    }\n  },\n\n  _triggerLoadCompletionEvents: function(_arrEventsToTrigger, _booFilesLoaded) {\n    var count = 0;\n    while (count < _arrEventsToTrigger.length) {\n      var _strCurrEvent = _arrEventsToTrigger[count];\n      EM.trigger(_strCurrEvent, _booFilesLoaded);\n      count++;\n    }\n  },\n\n  _allFilesLoadedPrimaryStart: function() {\n    var columnHeightMatching = 'matchColumnHeightDisabled';\n    if (MATCH_COLUMN_HEIGHT) {\n      columnHeightMatching = 'matchColumnHeightEnabled';\n    }\n    $('#screenHolderL').addClass(columnHeightMatching);\n\n    LOCALISER.localiseCoreHTML();\n  },\n\n  _allFilesLoadedSecondaryStart: function() {\n    EM.trigger('frameLoaded', self);\n    EM.trigger('primeDOMReferences', document);\n\n    // EM.trigger('initLMS');\n    CORE.init();\n    /* Trigger this to prime things */\n\n    // REFACTOR NOTE : remove orientation (search for duplicate refactors)\n    // EM.trigger('deviceOrientationChange');\n\n    var domBody = document.getElementsByTagName('body')[0];\n\n    /* IE8 addEventListener fix (not yet tested JH) */\n    if (!domBody.addEventListener) {\n      domBody.attachEvent('onunload', function() {\n        CONTENT_TRACKING.end();\n      });\n      domBody.attachEvent('unload', DEBUG.goAway);\n\n      if (BOO_PRETEND_TO_BE_SMARTPHONE_PHONE || BOO_PRETEND_TO_BE_TABLET) {\n        domBody.attachEvent('onmousedown', function() {\n          SWIPE_CONTROL.startSwipeGesture(event);\n        });\n        domBody.attachEvent('onmouseup', function() {\n          SWIPE_CONTROL.endSwipeGesture(event)\n          ;\n        });\n      }\n    } else {\n      domBody.addEventListener('unload', function() {\n        CONTENT_TRACKING.end();\n      }, false);\n\n      domBody.addEventListener('unload', DEBUG.goAway, false);\n\n      if (OUTPUT_MODE_CHECKER.strCurrentMode == 'smartphoneC' ||\n        OUTPUT_MODE_CHECKER.strCurrentMode == 'tabletC') {\n        domBody.addEventListener('touchstart', function() {\n          SWIPE_CONTROL.startSwipeGesture(event);\n        }, false);\n        domBody.addEventListener('touchend', function() {\n          SWIPE_CONTROL.endSwipeGesture(event);\n        }, false);\n      } else if (BOO_PRETEND_TO_BE_SMARTPHONE_PHONE || BOO_PRETEND_TO_BE_TABLET) {\n        domBody.addEventListener('mousedown', function() {\n          SWIPE_CONTROL.startSwipeGesture(event);\n        }, false);\n        domBody.addEventListener('mouseup', function() {\n          SWIPE_CONTROL.endSwipeGesture(event);\n        }, false);\n      }\n    }\n\n    this.booLoadSequenceComplete = true;\n\n    if (typeof GOMO_PREVIEW !== 'undefined') {\n      GOMO_PREVIEW.triggerPlayerLoaded();\n    }\n\n    // REFACTOR NOTE: Needs localisation\n    var _intIeCssFileLimit = 31;\n    if (LOADER.intCssFileCount >= _intIeCssFileLimit) {\n      this._debug('You have loaded ' +\n        LOADER.intCssFileCount +\n        ' CSS files\\n\\nIE9 and lower only supports '+ _intIeCssFileLimit +\n        ' concurrent CSS files.\\n\\n' +\n        'Please use the Assets and Extras MasterCSS import files to fix.\\n\\n' +\n        'See MANIFEST_MANAGER._booUseMasterCssFiles.', 'ERROR');\n    } else {\n      this._debug('You have loaded ' + LOADER.intCssFileCount + 'CSS files.\\n' +\n        'IE9 and lower only supports '+ _intIeCssFileLimit +' concurrent CSS files.', 'INFO');\n    }\n\n    // REFACTOR NOTE: work on bootloader sequence so that\n    // this automatically happens after portal data loaded\n    setTimeout(function() {\n      // Set animated background\n      if (BOO_ANIMATE_BASE_BACKGROUND) {\n        $('#pageWrapperL').addClass('animateBackgroundC');\n      }\n    }, 1000);\n\n    EM.trigger('gomoLoaded');\n    $(document).trigger('gomoLoaded');\n  },\n\n  _loadPreviewBootEntries: function() {\n    if (PREVIEW_DATA && PREVIEW_DATA.authoringMode) {\n      return true;\n    }\n    return false;\n  },\n\n  _debug: function(_strWhatMessage, _strMessageType) {\n    // Some errors can pass development on desktop but cause problems on other devices.\n    // If a known error for other devices is picked up it will be forced to the console here.\n\n    if ((_strMessageType == 'ERROR' || _strMessageType == 'WARNING') &&\n      window['console'] && window['console']['log']) {\n      console.log(_strMessageType + ' :: ' + _strWhatMessage);\n    } else if (this._booDebugMessages && window['console'] && window['console']['log']) {\n      if ( _strMessageType == null ) {\n        _strMessageType = 'UNDEFINED';\n      }\n      console.log(_strMessageType + ' :: ' + _strWhatMessage);\n    }\n  },\n\n  booTerminal: true\n};\n\nLOADER.init();\n"},function(t,e,n){n(0)(n(9))},function(t,e){t.exports="/* global EM, DEBUG, BOO_ALERT_UNHANDLED_EVENTS, BOO_LOG_EVENTS, LOCALISER, SCREEN_INTERACTIONS */\n\n/**\n * @title Event Manager\n * @description To be described.\n *\n *\n * @author GoMo\n * @version 2.0 17/12/12\n * @REACTOR: The registration ID and in particular the _getObjectId require further investigation. Currently it seems either non-sensical or is exploiting something I can't quite understand...\n */\n\n/*\nNOTE: Events are progated in sequence of registry, the first object to be register will be the first tested. This generally\n      means the frameset level objects take precedence.\n*/\n// eslint-disable-next-line no-unused-vars\nvar EM = {\n  strObjID: 'The event manager',\n\n  _intUniqueId: 0,\n  _objRegisteredObjects: {},\n  _objRegisteredFunctions: {},\n  _arrLoggedEvents: [],\n  previousEventTimeStamp: null,\n\n  _getNextUniqueId: function() {\n    this._intUniqueId++;\n    return this._intUniqueId;\n  },\n\n  _getObjectId: function(_objWhatObject) {\n    var _intReturn = -1;\n    for (var _intId in this._objRegisteredObjects) {\n      if (Object.prototype.hasOwnProperty.call(this._objRegisteredObjects, _intId)) {\n        var _objCurrRegisteredObject = this._objRegisteredObjects[_intId];\n        // REFACTOR NOTE: This needs to be replaced with a comparison that actually works!\n        if (_objCurrRegisteredObject === _objWhatObject) {\n          // alert(\"Match? ID: \" + _intId)\n          _intReturn = _intId;\n          break;\n        }\n      }\n    }\n    return _intReturn;\n  },\n\n  register: function(_objWhatObject) {\n    if (this._getObjectId(_objWhatObject) == -1) {\n      var _intId = this._getNextUniqueId();\n      this._objRegisteredObjects[_intId] = _objWhatObject;\n      this._getHandledEvents(_objWhatObject, _intId);\n      this.debug('EM.register(_objWhatObject:)', 1, _objWhatObject);\n    }\n  },\n\n  _getHandledEvents: function(_objWhatObject, _intId) {\n    for (var _strProperty in _objWhatObject) {\n      if (\n        typeof _objWhatObject[_strProperty] == 'function' &&\n        _strProperty.indexOf('handleEvent_') == 0\n      ) {\n        var _strEventName = _strProperty.replace('handleEvent_', '');\n        if (!this._objRegisteredFunctions[_strEventName]) {\n          this._objRegisteredFunctions[_strEventName] = {};\n        }\n        this._objRegisteredFunctions[_strEventName][_intId] = true;\n      }\n    }\n  },\n\n  updateExtendedObject: function(_objBase, _objExtension) {\n    var _intObjId = this._getObjectId(_objBase);\n    if (_intObjId > -1) {\n      this._getHandledEvents(_objExtension, _intObjId);\n    }\n  },\n\n  unregister: function(_objWhatObject) {\n    var _intObjId = this._getObjectId(_objWhatObject);\n    if (_intObjId > -1) {\n      this._removeRegisteredFunctions(_intObjId);\n      delete this._objRegisteredObjects[_intObjId];\n    }\n  },\n\n  _removeRegisteredFunctions: function(_intId) {\n    for (var _strEventName in this._objRegisteredFunctions) {\n      if (Object.prototype.hasOwnProperty.call(this._objRegisteredFunctions, _strEventName)) {\n        delete this._objRegisteredFunctions[_strEventName][_intId];\n      }\n    }\n  },\n\n  trigger: function(_strEventName, _mixParam) {\n    // If we've called this func without an eventName, return out\n    if (_strEventName === '') {\n      return;\n    }\n    // This class can be run before SCREEN_INTERACTIONS is loaded\n    if (typeof SCREEN_INTERACTIONS !== 'undefined'\n    && (typeof event !== 'undefined' && event !== null)) {\n      /*\n       * Check if the event was triggered from a user interaction\n       * and the screen is 'locked'/animating\n       */\n      var eventCode = event.which || event.keyCode;\n      if (\n        eventCode === 1 &&\n        SCREEN_INTERACTIONS.isScreenLocked()\n      ) {\n        // If this is our first event we need to set a timeStamp\n        if (this.previousEventTimeStamp === null) {\n          this.previousEventTimeStamp = event.timeStamp;\n        }\n        // While the screen is locked we need to check if the event is from the same initial interaction\n        if (event.timeStamp !== this.previousEventTimeStamp) {\n          // Ignore input\n          return false;\n        }\n      } else if (typeof event !== 'undefined' && eventCode === 1) {\n        // This is a user triggered event but the screen isn't locked, set a new timestamp\n        this.previousEventTimeStamp = event.timeStamp;\n      }\n    }\n\n    if (typeof BOO_LOG_EVENTS !== 'undefined' && BOO_LOG_EVENTS) {\n      this._arrLoggedEvents.push(_strEventName);\n    }\n\n    var _booTriggered = false;\n\n    if (this._objRegisteredFunctions[_strEventName]) {\n      for (var _intObjectId in this._objRegisteredFunctions[_strEventName]) {\n        if (_intObjectId) {\n          var _objObject = this._objRegisteredObjects[_intObjectId];\n          var _booResult = this.fireIfHandled(_objObject, _strEventName, _mixParam);\n          if (_booResult) {\n            _booTriggered = true;\n          }\n        }\n      }\n    }\n    if (!_booTriggered && BOO_ALERT_UNHANDLED_EVENTS) {\n      LOCALISER.l_alert('EVENT_MANANAGER_UNHANDLED_EVENT_WARNING', [_strEventName]);\n    }\n\n    // Return false to prevent page reloads if the event was triggered from a link's onclick event.\n    return false;\n  },\n\n  fireIfHandled: function(_obj, _strEventName, _mixParam) {\n    if (_obj && _obj['handleEvent_' + _strEventName]) {\n      _obj['handleEvent_' + _strEventName](_mixParam);\n      return true;\n    }\n    return false;\n  },\n\n  debug: function(strMessage, intPriority, objCallerObject, booCalleeChain) {\n    if (DEBUG) {\n      DEBUG.lert(strMessage, intPriority, objCallerObject, booCalleeChain);\n    }\n  }\n};\n"},function(t,e,n){n(0)(n(11))},function(t,e){t.exports='/**\n* @title Debugger\n* @description To be described. \n*\n*\n* @author JohnC\n* @version 2.0 09/06/06\n*/\n\nvar DEBUG =\n{\n\tid: "DeBugger",\n\n\t// Used to hold the HTML that is to be written until the next update cycle.\n\tdebugMessageCache: "",\n\n\t// Used to determine wether to update during the setInterval loop.\n\tautoUpdate : true,\n\n\t// The setInterval is attached to this.\n\ttimerObj : false,\n\n\t// The amount of millisecounds between each update cycle.\n\tupdateCyclicRate : 500,\n\n\t// Use this to filter out different message level\'s.\n\tdebugPriorityThreshold :6,\n\n\t// If set to true, the message\'s will be written out using document.write()\n\t// if false, .innerHTML().\n\t// Whilst document.write() is handy for debugging the debugger, it\n\t// causes the message window to stop recieving messages once the window\n\t// is interacted with.\n\toutputAsWrite : false,\n\n\t// Determines wether to include the body or just the title of a callee function\n\tshowCalleeFunctionsInFull : false,\n\n\t// Used to deal with a "feature" in function.callee, whereby recursive\n\t// function ALWAYS cause an infinite loop, regardless of wether the\n\t// actual recursion itself breaks.\n\t// This is the number of times a function name can appear before\n\t// the .callee chain is regarded as an infinite loop.\n\trecursionThreshold : 2,\n\n/* ============================ START DEBUG WINDOW PARAM\'s ============================ */\n\tdebug : false,\n\tdebugWin : null,\n\tdebugWinName : "DeBuggerWin" + new String(Math.round(Math.random() * 10000)),\n\tdebugWinX : 0,\n\tdebugWinY : 0,\n\tdebugWinWidth : 300,\n\tdebugWinHeight : 600,\n\tdebugCounter : 0,\t// Very important, used to generate the ID\'s of the various Debug elements.\n/* ============================= END DEBUG WINDOW PARAM\'s ============================= */\n\n\n\n/* ============================ START STYLE MARKUP ============================ */\n\t// Whilst I agree this is quite a lot of style info outside of a style\n\t// sheet, I didn\'t want to have to include a .css file alongside a .js\n\t// Currently set as:\n\t//\t- Header\t(black)\n\t//\t- Normal (green)\n\t//\t- Warning (orange)\n\t//\t- Error (red)\n\t//\t- Debug (purple)\n\tfontWrapper : new Array(\n\t"<div style=\'margin:2px; padding:5px; border-top:1px solid black; border-bottom:1px solid black; background-color:#efefef;\'><span style=\'font-family: Verdana, Arial, Sans-Serif; font-size: 20pt; color:black;\'>",\n\t"<div style=\'margin:2px; padding:5px; border-top:1px solid green;\'><span style=\'font-family: Verdana, Arial, Sans-Serif; font-size: 10pt; color:green;\'>",\n\t"<div style=\'margin:2px; margin-bottom:10px; padding:10px; border:1px solid darkorange;\'><span style=\'font-family: Verdana, Arial, Sans-Serif; font-size: 10pt; color:darkorange;\'>",\n\t"<div style=\'margin:2px; margin-bottom:10px; padding:10px; border:2px solid red;\'><span style=\'font-family: Verdana, Arial, Sans-Serif; font-size: 10pt; color:red;\'>",\n\t"<div style=\'margin:2px; margin-bottom:10px; padding:10px; border:2px dashed purple;\'><span style=\'font-family: Verdana, Arial, Sans-Serif; font-size: 10pt; color:purple;\'>"\n\t),\n\n\tendFont : "</span></div>",\n/* ============================= END STYLE MARKUP ============================= */\n\n\n\n/* ============================ START PUBLIC METHODS ============================ */\n\t// The main function public function, it is little more than a wrapper for\n\t// this.createDebugMessage(). Its main job is to increment this.debugCounter.\n\t// It takes 4 param\'s:\n\t//\t- whatMessage: A string of the message text.\n\t//\t- whatPriority: Defines which of the this.fontWrapper[] array will be used to wrap around\n\t//\t\t\t\t\t\t\t\t\tthe whatMessage text. It also effects how this.createDebugMessage() behaves\n\t//\t\t\t\t\t\t\t\t\twith regards to priority 0 (header) messages.\n\t//\t- showCalleeChain: A boolean variable that dictates wether or not to show the\n\t//\t\t\t\t\t\t\t\t\t\t callee chain. As generating the callee chain can cause a LARGE\n\t//\t\t\t\t\t\t\t\t\t\t processing drain, it is advised to use this flag sparingly.\n\t//\t- whatCallerObject: An optional object that will have its properties recursivly display\'d\n\t//\t\t\t\t\t\t\t\t\t\t\tin the debug window. In the event multiple object require interigating\n\t//\t\t\t\t\t\t\t\t\t\t\tsimply collate them into an array and pass that as the param.\n\t//\n\t// The function is named lert because you country needs lert\'s as told by the graffiti\n\t// I saw on an old advert:\n\t//\n\t//\tBOMBS - BE AWARE\n\t//\n\t//\t\t- Don\'t be a ware, there are two many ware\'s already, be a lert instead.\n\t// (msg, priority, whatObj, showCallee)\n\tlert : function (whatMessage, whatPriority, whatCallerObject, showCalleeChain)\n\t{\n\t\tif (whatPriority >= this.debugPriorityThreshold)\n\t\t{\n\t\t\t//alert("whatMessage: " + whatMessage)\n\t\t\tthis.debugCounter++;\n\t\t\tvar msgText = this.createDebugMessage(whatMessage, whatPriority, whatCallerObject, showCalleeChain);\n\t\t\tthis.debugMessageCache += msgText;\n\t\t}\n\t},\n\n\n\t// If autoUpdate where set to false, this method is exposed to allow\n\t// manual purging. Of the cache.\n\tforceUpdate : function ()\n\t{\n\t\tthis.updateWindow();\n\t},\n\n\t// Again, only likely to be used if the DEBUGer was operating in manual.\n\tclearCache : function ()\n\t{\n\t\tthis.debugMessageCache = "";\n\t},\n\n\t// Stop the automatic updates\n\tpause : function ()\n\t{\n\t\tthis.autoUpdate = false;\n\t},\n\n\t// Restarts them\n\tresume : function ()\n\t{\n\t\tthis.autoUpdate = true;\n\t},\n\n\t// This should be called onunload. It will clean\n\t// up the open window and the setInterval.\n\tgoAway : function ()\n\t{\n\t\tthis.stopTimer();\n\t\tthis.closeWindow();\n\t\t//alert("Bye!")\n\t},\n\n/* ============================= END PUBLIC METHODS ============================= */\n\n\n\n/* ============================ START PRIVATE METHODS =========================== */\n\n\t/* ================ START WINDOW METHODS ================ */\n\n\t// First checks to see if the window already exists, and if it does,\n\t// that it hasn\'t been closed. If thats the case, the function returns there,\n\t// if not, it opens the window and writes the expand/collapse code.\n\tcheckAndOpenWindow : function ()\n\t{\n\t\tif (this.debugWin)\n\t\t{\n\t\t\tif (!this.debugWin.closed)\n\t\t\t{\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\t// Most of these options are set up the top in DEBUG WINDOW PARAM\'s section\n\t\tvar winOptions ="top=" + this.debugWinY + ",left=" + this.debugWinX + ",width=" + this.debugWinWidth + ",height=" + this.debugWinHeight + ",toolbar=no,menubar=no,status=yes,scrollbars=yes,resizable=yes,fullscreen=no";\n\n\t\tthis.debugWin = window.open(\'\', this.debugWinName, winOptions);\n\n\t\t// Write out the basic expand/collapse function along with\n\t\t// a skeleton web page with a holder DIV.\n\t\tvar baseContent = \'<html>\'\n\t\tbaseContent += \'<head>\'\n\t\tbaseContent += \'<title>\' + this.id + \'</title>\'\n\t\tbaseContent += \'<script>\'\n\t\tbaseContent += \'function toggleBodyVis(whatID)\'\n\t\tbaseContent += \'{\'\n\t\tbaseContent += \'\tvar currBody = document.getElementById(whatID + "BodyHolderID");\'\n\t\tbaseContent += \'\tvar currLink = document.getElementById(whatID + "LinkTextID");\'\n\t\tbaseContent += \'\tif (currBody)\'\n\t\tbaseContent += \'\t{\'\n\t\tbaseContent += \'\t\tif (currBody.style.display == "none")\'\n\t\tbaseContent += \'\t\t{\'\n\t\tbaseContent += \'\t\t\tcurrBody.style.display = "block";\'\n\t\tbaseContent += \'\t\t\tcurrLink.innerHTML = currLink.innerHTML.replace("+","-");\'\n\t\tbaseContent += \'\t\t}\'\n\t\tbaseContent += \'\t\telse\'\n\t\tbaseContent += \'\t\t{\'\n\t\tbaseContent += \'\t\t\tcurrBody.style.display = "none";\'\n\t\tbaseContent += \'\t\t\tcurrLink.innerHTML = currLink.innerHTML.replace("-","+");\'\n\t\tbaseContent += \'\t\t}\'\n\t\tbaseContent += \'\t}\'\n\t\tbaseContent += \'}\'\n\t\tbaseContent += \'<\/script>\'\n\t\tbaseContent += \'</head>\'\n\n\t\tbaseContent += \'<body>\'\n\t\tbaseContent += \'<div id="outputID"></div>\'\n\t\tbaseContent += \'</body>\'\n\t\tbaseContent += \'</html>\'\n\n\t\tthis.debugWin.document.write(baseContent)\n\t},\n\n\n\t// This is either called manually from DEBUG.forceUpdate()\n\t// or automatically from DEBUG.doTimer(). It calls this.checkAndOpenWindow()\n\t// to ensure the window is present and then flush\'s the cache into the\n\t// holder DIV on the popup window.\n\tupdateWindow : function ()\n\t{\n\t\tthis.checkAndOpenWindow()\n\t\tif (!this.debugWin.closed)\n\t\t{\n\t\t\tif (!this.outputAsWrite)\n\t\t\t\tthis.debugWin.document.getElementById("outputID").innerHTML += this.debugMessageCache;\n\t\t\telse\n\t\t\t\tthis.debugWin.document.getElementById("outputID").document.write(this.debugMessageCache);\n\n\t\t\tthis.debugMessageCache = "";\n\t\t\tthis.stopTimer();\n\t\t}\n\t},\n\n\tcloseWindow : function ()\n\t{\n\t\tif ((this.debugWin) && (!this.debugWin.closed))\n\t\t\tthis.debugWin.close();\n\t},\n\t/* ================ END WINDOW METHODS ================= */\n\n\n\n\n\t/* ================ START TIMER METHODS ================ */\n\t// Called by this.createDebugMessage(), this function\n\t// first checks timerObj isn\'t currently a timer, it\n\t// returns if there is already one running.\n\t// It then starts the timer based on this.updateCyclicRate.\n\tstartTimer : function ()\n\t{\n\t\t//alert("Timer started")\n\t\tif (this.timerObj)\n\t\t\treturn\n\t\tthis.timerObj = window.setInterval("DEBUG.doTimer()", this.updateCyclicRate)\n\t},\n\n\t// This function is technically a public function in that it is\n\t// called outside of the object by the setInterval code, which\n\t// has to reference the code as \'DEBUG.doTimer()\'.\n\t// If this.autoUpdate is true, it calls this.updateWindow().\n\tdoTimer : function ()\n\t{\n\t\tif (this.autoUpdate)\n\t\t{\n\t\t\t//document.getElementById("tempOutputID").innerHTML += "."\n\t\t\tthis.updateWindow()\n\t\t}\n\t},\n\n\t// Clears DEBUG.timerObj. Called by this.goAway() and this.updateWindow()\n\tstopTimer : function ()\n\t{\n\t\twindow.clearInterval(DEBUG.timerObj)\n\t\tthis.timerObj = false;\n\t},\n\t/* ================= END TIMER METHODS ================= */\n\n\n\n\n\t/* =============== START MESSAGE METHODS =============== */\n\t// This is the main function for message creation, all other methods\n\t// are called from this one.\n\t// It takes 4 param\'s:\n\t//\t- whatMessage: A string of the message text.\n\t//\t- whatPriority: Defines which of the this.fontWrapper[] array will be used to wrap around\n\t//\t\t\t\t\t\t\t\t\tthe whatMessage text. It also effects how this.createDebugMessage() behaves\n\t//\t\t\t\t\t\t\t\t\twith regards to priority 0 (header) messages.\n\t//\t- whatCallerObject: An optional object that will have its properties recursivly display\'d\n\t//\t\t\t\t\t\t\t\t\t\t\tin the debug window. In the event multiple object require interigating\n\t//\t\t\t\t\t\t\t\t\t\t\tsimply collate them into an array and pass that as the param.\n\t//\t- showCalleeChain: A boolean variable that dictates wether or not to show the\n\t//\t\t\t\t\t\t\t\t\t\t callee chain. As generating the callee chain can cause a LARGE\n\t//\t\t\t\t\t\t\t\t\t\t processing drain, it is advised to use this flag sparingly.\n\t// It first calls this.parseContentOutput(whatMessage) to replace \'<\' and \'>\' with &lt; &gt;, TAB with &nbsp;&nbsp;&nbsp;\n\t// and \\n with <br/>.\n\t// Then a check is made as to wether its a header, if its not, the object and function callee path\n\t// are appended by calling this.calcCalleePath(); and (if its present) this.showCallerObject();\n\t// Lastly, the timer is started so the buffer can be flushed shortly.\n\tcreateDebugMessage : function (whatMessage, whatPriority, whatCallerObject, showCalleeChain)\n\t{\n\t\twhatMessage = this.parseContentOutput(whatMessage)\n\n\t\t// If its not a header.\n\t\tif (whatPriority != 0)\n\t\t{\n\t\t\tif (showCalleeChain)\n\t\t\t\twhatMessage += "<br/>" + this.calcCalleePath();\n\t\t\tif (whatCallerObject)\n\t\t\t\twhatMessage += "<br/>" + this.showCallerObject(whatCallerObject, this.debugCounter);\n\n\t\t\t//alert("this.debugCounter: " + this.debugCounter + "\\nwhatPriority: " + whatPriority + "\\nthis.fontWrapper[whatPriority]: " + this.fontWrapper[whatPriority])\n\n\t\t\twhatMessage = this.fontWrapper[whatPriority] + this.debugCounter + ") " + whatMessage + this.endFont;\n\t\t}\n\t\telse\n\t\t{\n\t\t\twhatMessage = this.fontWrapper[whatPriority] + whatMessage + this.endFont;\n\t\t}\n\t\tthis.startTimer()\n\t\treturn whatMessage;\n\t},\n\n\n\t// After skipping up out of the scope of this objects internal event chain (by\n\t// the line this.calcCalleePath.caller.caller.caller) it loops until it find\'s\n\t// a .callee property thats false.\n\t// Each time it finds a valid function, it appends a link with the function name to the returnString\n\t// along with the function body hidden within an expandible div.\n\t//\n\t// NOTE: Due to the way .caller is implemented, it can\'t handle recursive functions\n\t// properly, by the time you come to read the .callee property for a function that appears\n\t// more than once in the current event chain, it has been set to the last caller/callee\n\t// relationship and there is no way to discern the previous caller/callee relationships\n\t// it may have enjoyed in the event chains past. To counter this, if a function\'s name\n\t// appears more than the this.recursionThreshold property, the loop is broken and a\n\t// red error message is added to notify the user this occured.\n\t//\n\t// Furthermore, the function is further hamstrung by good old IE deciding to NOT\n\t// report .caller if it happens to be in another frame. Thus makings its use in a\n\t// lot of our project\'s diminished. Firefox does however give full .caller chain\'s\n\t// across frames.\n\tcalcCalleePath : function ()\n\t{\n\t\t// Build the callee wrapper for this message\n\t\tvar startCalleeWrapper = "<a id=\'" + this.debugCounter + "CalleeLinkTextID\' href=\'javascript:toggleBodyVis(\\"" + this.debugCounter + "Callee\\")\' title=\'Show function call path\'>"\n\t\tstartCalleeWrapper += "+ Callee\'s</a><br/>\\n";\n\t\tstartCalleeWrapper += "<div id=\'" + this.debugCounter + "CalleeBodyHolderID\' style=\'display:none; padding:3px; margin:3px; border:1px solid #cccccc;\'>\\n"\n\t\tvar returnString = ""\n\t\tvar count = 0;\n\t\t// We need to rise above the event chain of this object.\n\t\tvar currCallerFunction = this.calcCalleePath.caller.caller.caller\n\n\t\tvar usedCalleeNames = new Array()\n\n\t\t// While the currCallerFunction is still valid.\n\t\twhile ((currCallerFunction != false) && (currCallerFunction != null))\n\t\t{\n\t\t\tcount++\n\n\t\t\t// Strip\'s out the function name. Note, if you have defined your functions like this:\n\t\t\t//\n\t\t\t// var myFunc = function () {myCode;}\n\t\t\t//\n\t\t\t// Then the trimFunctionName will return "", which will cause the code below to list\n\t\t\t// the function as "UNAMED_FUNCTION".\n\t\t\t// Consider instead creating your functions like this:\n\t\t\t//\n\t\t\t// var myFunc = function _myFunc() {myCode;}\n\t\t\t//\n\t\t\t// Which will leave a grabbable name for the callee path.\n\t\t\tvar currFunctionName = this.trimFunctionName(currCallerFunction.toString())\n\n\t\t\tif (usedCalleeNames[currFunctionName])\n\t\t\t{\n\t\t\t\tif (usedCalleeNames[currFunctionName] < this.recursionThreshold)\n\t\t\t\t{\n\t\t\t\t\tusedCalleeNames[currFunctionName]++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturnString = "<span style=\'color:red; font-weight:bold;\'>Hit recursion threshold.</span> " + returnString\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tusedCalleeNames[currFunctionName] = 1\n\t\t\t}\n\t\t\t//alert("currFunctionName: " + currFunctionName + "\\n\\ncount: " + count)\n\t\t\t// Trims between the first { and the last }\n\t\t\tvar currFunctionBody = this.trimFunctionContents(currCallerFunction.toString())\n\t\t\tvar currFunctionText = "";\n\n\t\t\t// If there is a caller property on currCallerFunction, reset currCallerFunction to be the next caller.\n\t\t\tif (currCallerFunction)\n\t\t\t{\n\t\t\t\tcurrCallerFunction = currCallerFunction.caller\n\t\t\t}\n\t\t\telse\t// Otherwise set the currCallerFunction to false so the loop ends.\n\t\t\t{\n\t\t\t\tcurrCallerFunction = false;\n\t\t\t}\n\n\t\t\tcurrFunctionText += this.buildFunctionPathEntry(currFunctionName, currFunctionBody, (this.debugCounter + "_" + count))\n\n\t\t\treturnString = currFunctionText + returnString\n\t\t}\n\n\t\t// Add the wrapper givings the "+ Callee\'s" link and needed code.\n\t\treturnString = startCalleeWrapper + returnString + "</div>";\n\t\treturn returnString\n\t},\n\n\n\t// Gets the function name and the param\'s by slicing\n\t// from the end of "function" to the first ")".\n\t// Checks there is a name present and prefix\'s the string with\n\t// "UNAMED_FUNCTION".\n\t// Returns the adjusted string.\n\ttrimFunctionName : function (whatFunctionString)\n\t{\n\t\tvar startTrim = whatFunctionString.indexOf("function") + 9\n\t\tvar testEndTrim = whatFunctionString.indexOf("(")\n\t\tvar endTrim = whatFunctionString.indexOf(")") + 1\n\n\t\tvar trimmedText = whatFunctionString.slice(startTrim - 1, endTrim)\n\t\tvar testTrim = this.trimSpacesAndTabs(whatFunctionString.slice((startTrim), (testEndTrim)))\n\n\t\tif (testTrim == "")\n\t\t\ttrimmedText = "UNAMED_FUNCTION " + trimmedText\n\n\t\tif (trimmedText.length > 0)\n\t\t{\n\t\t\t//alert("this.trimSpacesAndTabs(trimmedText): " + this.trimSpacesAndTabs(trimmedText))\n\t\t\treturn this.trimSpacesAndTabs(trimmedText);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t},\n\n\n\t// Used by the above function _to extract the inner portion of a function. Its find the first { and the last }\n\t// and returns any text in-between after trimming spaces and tab\'s.\n\ttrimFunctionContents : function (whatFunctionString)\n\t{\n\t\tvar startTrim = whatFunctionString.indexOf("{") + 1\n\t\tvar endTrim = whatFunctionString.lastIndexOf("}")\n\t\tvar trimmedText = this.trimSpacesAndTabs(whatFunctionString.slice(startTrim, endTrim))\n\t\treturn trimmedText;\n\t},\n\n\n\t// Four loops remove leading and trailing tabs and spaces\n\t// and then return the result.\n\ttrimSpacesAndTabs : function (whatString)\n\t{\n\t\tvar trimmedString = whatString;\n\t\twhile (trimmedString.charAt(0) == " ")\n\t\t\ttrimmedString = trimmedString.slice(1 , trimmedString.length)\n\n\t\twhile (trimmedString.charAt(trimmedString.length-1) == " ")\n\t\t\ttrimmedString = trimmedString.slice(0 , trimmedString.length - 1)\n\n\t\twhile (trimmedString.charAt(0) == "\t")\n\t\t\ttrimmedString = trimmedString.slice(1 , trimmedString.length)\n\n\t\twhile (trimmedString.charAt(trimmedString.length-1) == "\t")\n\t\t\ttrimmedString = trimmedString.slice(0 , trimmedString.length - 1)\n\n\treturn trimmedString;\n\t},\n\n\n\t// This function takes the name, body and ID of a callee function and constructs the link\n\t// and collapsed entry for the body.\n\t// If its finds any anonymous() functions it renames them with the easier to notice "NATIVE_CODE: \'\'".\n\tbuildFunctionPathEntry : function (whatName, whatBody, whatID)\n\t{\n\t\tvar returnString = "<span>";\n\n\t\tif (this.showCalleeFunctionsInFull)\n\t\t{\n\t\t\t// Produce the link.\n\t\t\treturnString += "<a id=\'" + whatID + "FuncLinkTextID\' href=\'javascript:toggleBodyVis(\\"" + whatID + "Func\\")\' ";\n\t\t\treturnString += "title=\'Click here to expand the function body.\'>";\n\t\t}\n\t\tif (whatName != "anonymous()")\n\t\t{\n\t\t\treturnString += "+ " + whatName;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturnString += "+ NATIVE_CODE: \'" + whatName + "\'";\n\t\t}\n\n\t\tif (this.showCalleeFunctionsInFull)\n\t\t{\n\t\t\treturnString += "</a>\\n";\n\t\t\t// Produce the collapsed entry for the body.\n\t\t\treturnString += "<div id=\'" + whatID + "FuncBodyHolderID\' style=\'display:none; border:1px solid #dddddd; padding:5px; margin:5px;\'>";\n\t\t\treturnString += "{";\n\t\t\treturnString += this.parseContentOutput(whatBody);\n\t\t\t//alert("this.parseContentOutput(whatBody): " + this.parseContentOutput(whatBody))\n\t\t\treturnString += "}<br/>";\n\t\t\treturnString += "</div>\\n";\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturnString += "\\n";\n\t\t}\n\n\n\t\treturnString += "</span>\\n";\n\n\t\treturn returnString;\n\t},\n\n\n\t// This function takes the (optional) object passed to the lert function\n\t// and creates a link and a collapsed entry for the \'body\' which is a list of the\n\t// methods and properties of the object.\n\t// If a property is found to be an object/array, the code will recurse.\n\tshowCallerObject : function (whatObject, whatID)\n\t{\n\t\tvar startObjectWrapper = "<a id=\'" + whatID + "ObjectLinkTextID\' href=\'javascript:toggleBodyVis(\\"" + whatID + "Object\\")\' title=\'Show Object info\'>"\n\n\t\t// Attempt to find an ID property within the object to add meaning to the Object: link.\n\t\t//alert("whatObject: " + whatObject)\n\t\tif (whatObject.objID)\n\t\t{\n\t\t\tstartObjectWrapper += "+ Object: " + whatObject.objID + "</a><br/>\\n";\n\t\t}\n\t\telse if (whatObject.id)\n\t\t{\n\t\t\tstartObjectWrapper += "+ Object: " + whatObject.id + "</a><br/>\\n";\n\t\t}\n\t\telse if (whatObject.name)\n\t\t{\n\t\t\tstartObjectWrapper += "+ Object: " + whatObject.name + "</a><br/>\\n";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstartObjectWrapper += "+ Object</a><br/>\\n";\n\t\t}\n\t\tstartObjectWrapper += "<div id=\'" + whatID + "ObjectBodyHolderID\' style=\'display:none; padding:3px; margin:3px; border:1px solid #cccccc;\'>\\n"\n\t\t// Call the buildObjectBodyText() to parse the object.\n\t\tstartObjectWrapper += this.buildObjectBodyText(whatObject, whatID);\n\t\tstartObjectWrapper += "</div>\\n";\n\n\t\treturn startObjectWrapper\n\t},\n\n\n\t// Using a \'for in\' loop, the function examines each property of whatObj.\n\t// It will then either call this.trimFunctionName(), this.showCallerObject() (recursivly)\n\t// or simply list the property if its a simple variable.\n\tbuildObjectBodyText : function (whatObj, whatID)\n\t{\n\t\tvar returnText = "<h3>Object properties:</h3>"\n\t\tvar propertiesArray = new Array();\n\t\tvar count = 0;\n\n\t\tfor (var propCount in whatObj)\n\t\t{\n\t\t\tcount++\n\t\t\ttry\n\t\t\t{\n\t\t\t\tpropType = typeof whatObj[propCount]\n\t\t\t\t//alert("propCount: " + propCount + ", type: " + propType)\n\t\t\t\tswitch (propType)\n\t\t\t\t{\n\t\t\t\t\tcase "function":\n\t\t\t\t\t\tpropertiesArray[propertiesArray.length] = propCount + " = " + this.trimFunctionName(whatObj[propCount].toString()) + "<br/>";\n\t\t\t\t\t\t//alert("propertiesArray[propertiesArray.length - 1]: " + propertiesArray[propertiesArray.length - 1])\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase "object":\n\t\t\t\t\t\tif (whatObj[propCount])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttry\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (((whatObj[propCount] instanceof Object) || (whatObj[propCount] instanceof Array)) && (propCount != "parentObj") && (propCount != "_objParent") && (propCount != "objParent") && (propCount != "_objParentObj") && (propCount != "objNav") && (propCount != "objContentDOM"))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpropertiesArray[propertiesArray.length] = propCount + " = " + this.showCallerObject(whatObj[propCount], (whatID + "_" + count)) + "<br/>";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if ((whatObj[propCount] != null) && (whatObj[propCount] != false))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (whatObj[propCount] instanceof Function)\n\t\t\t\t\t\t\t\t\t\tpropertiesArray[propertiesArray.length] = propCount + " = " + this.parseContentOutput(whatObj[propCount].toString()) + "<br/>";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (_strError)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Throw error here.\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//else\n\t\t\t\t\t\t//\tpropertiesArray[propertiesArray.length] = propCount + " = " + whatObj[propCount] + "<br/>";\n\t\t\t\t\tbreak;\n\t\t\t\t\tcase "string":\n\t\t\t\t\t\tpropertiesArray[propertiesArray.length] = propCount + " = " + this.parseContentOutput(whatObj[propCount]) + "<br/>";\n\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tpropertiesArray[propertiesArray.length] = propCount + " = " + whatObj[propCount] + "<br/>";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (_strError)\n\t\t\t{\n\t\t\t\t// Throw error here.\n\t\t\t\ttypeof ErrorHandler != \'undefined\' && ErrorHandler[\'catch\'] && ErrorHandler[\'catch\'](_strError)\n\t\t\t}\n\t\t}\n\t\t// Sort then loop through all the values found above adding the X) suffix\n\t\t// before returning the string.\n\t\tvar count = 0;\n\t\tpropertiesArray.sort()\n\t\twhile (count < propertiesArray.length)\n\t\t{\n\t\t\treturnText += (count + 1) + ") " + propertiesArray[count]\n\t\t\tcount++\n\t\t}\n\t\treturn returnText;\n\t},\n\n\n\t// Called to replace \'<\' and \'>\' with &lt; &gt;, TAB with &nbsp;&nbsp;&nbsp;\n\t// and \\n with <br/> on output message text to avoid layout issues.\n\tparseContentOutput : function (whatOutput)\n\t{\n\t\twhatOutput = whatOutput.replace(/</gi, "&lt;")\n\t\twhatOutput = whatOutput.replace(/>/gi, "&gt;")\n\t\twhatOutput = whatOutput.replace(/\t/gi, "&nbsp;&nbsp;&nbsp;")\n\t\twhatOutput = whatOutput.replace(/\\n/gi, "<br/>")\n\t\treturn whatOutput;\n\t}\n\n/* ============================= END PRIVATE METHODS ============================ */\n}\n\nDEBUG.lert("DEBUGGER INITIALIZED.",0,false,false)\nDEBUG.lert("DEBUG:",1,DEBUG,true)'}]);