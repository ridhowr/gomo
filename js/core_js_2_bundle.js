!function(e){var n={};function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)t.d(r,a,function(n){return e[n]}.bind(null,a));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=12)}([function(e,n){e.exports=function(e){function n(e){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",e)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(e):"undefined"!=typeof eval?eval.call(null,e):n("EvalError: No eval function available")}catch(e){n(e)}}},,,,,,,,,,,,function(e,n,t){"use strict";t.r(n);t(13),t(15),t(17),t(19),t(21),t(23),t(25),t(27),t(29),t(31)},function(e,n,t){t(0)(t(14))},function(e,n){e.exports="/* global CURRENT_LOCALISED_DATA, BOO_PRODUCE_ALL_ZZZ, PREVIEW_DATA */\n\n/**\n * @title Localiser\n * @description To be described.\n *\n *\n * @author GoMo\n * @version 2.0 17/12/12\n */\n\nvar LOCALISER = {\n  strObjID: 'The Localiser',\n  strObjDescription:\n    'This object parses template fragments strings in need of localising and serves ' +\n    'up resolved localised string or alerts.',\n\n  _regHTMLLanguageMarkupPattern: /LL_[\\w-]+_LL/g,\n  _regVariableTokenPattern: /\\{\\d+\\}/g,\n\n  _booMissingLocalisationDataErrorShown: false,\n\n  localiseCoreHTML: function() {\n    var _domOuterMostCoreElement = document.getElementById('operatingSystemL');\n    var _htmOuterMostCoreElementContent = _domOuterMostCoreElement.innerHTML;\n    _htmOuterMostCoreElementContent = this.parseForLocalisableMarkup(\n      _htmOuterMostCoreElementContent\n    );\n    _domOuterMostCoreElement.innerHTML = _htmOuterMostCoreElementContent;\n  },\n\n  parseForLocalisableMarkup: function(_htmWhatFragment) {\n    var _arrMatches = _htmWhatFragment.match(this._regHTMLLanguageMarkupPattern);\n    if (_arrMatches) {\n      var count = 0;\n      while (count < _arrMatches.length) {\n        var _strCurrMatch = _arrMatches[count].replace('LL_', '').replace('_LL', '');\n        var _strLocalisedString = this._getLocalString(_strCurrMatch);\n        if (_strLocalisedString || _strLocalisedString === '') {\n          _htmWhatFragment = _htmWhatFragment.replace(_arrMatches[count], _strLocalisedString);\n        }\n        count++;\n      }\n    }\n    return _htmWhatFragment;\n  },\n\n  get: function(_strWhatStringKey, _arrWhatVariables) {\n    var _strLocalisedString = this._getLocalString(_strWhatStringKey);\n    if (_strLocalisedString) {\n      _strLocalisedString = this._replaceTokens(_strLocalisedString, _arrWhatVariables);\n      return _strLocalisedString;\n    }\n    return '';\n  },\n\n  l_alert: function(_strWhatStringKey, _arrWhatVariables, tokenError) {\n    var _strLocalisedString = this._getLocalString(_strWhatStringKey);\n    if (_strLocalisedString) {\n      // Don't attempt to replace tokens if that was the original error\n      var _strAlertString = _strLocalisedString;\n      if (!tokenError) {\n        _strAlertString = this._replaceTokens(_strLocalisedString, _arrWhatVariables);\n      }\n      if (PREVIEW_DATA && PREVIEW_DATA.editorMode) {\n        console.log(_strAlertString);\n      } else {\n        alert(_strAlertString);\n      }\n    }\n  },\n\n  _replaceTokens: function(_strWhatText, _arrWhatVariables) {\n    var _intVariableCount = 0;\n    if (_arrWhatVariables) {\n      _intVariableCount = _arrWhatVariables.length;\n    }\n\n    var _intTokenCount = this._getTokenCount(_strWhatText);\n\n    if (_intVariableCount != _intTokenCount) {\n      var tokenError = true;\n      LOCALISER.l_alert('LOCALISER_MISMATCHED_VARIABLE_TOKEN_ERROR', [\n        _intVariableCount,\n        _intTokenCount,\n        _strWhatText\n      ], tokenError);\n    }\n\n    var _arrMatches = _strWhatText.match(this._regVariableTokenPattern);\n\n    if (_arrMatches) {\n      var count = 0;\n      while (count < _arrMatches.length) {\n        _strWhatText = _strWhatText.replace(_arrMatches[count], _arrWhatVariables[count]);\n        count++;\n      }\n    }\n\n    return _strWhatText;\n  },\n\n  _getTokenCount: function(_strWhatText) {\n    var _arrMatches = _strWhatText.match(this._regVariableTokenPattern);\n    if (_arrMatches) {\n      return _arrMatches.length;\n    }\n    return 0;\n  },\n\n  _getLocalString: function(_strLocalisationKey) {\n    if (\n      CURRENT_LOCALISED_DATA[_strLocalisationKey] ||\n      CURRENT_LOCALISED_DATA[_strLocalisationKey] === ''\n    ) {\n      var _strLocalString = CURRENT_LOCALISED_DATA[_strLocalisationKey];\n      if (BOO_PRODUCE_ALL_ZZZ) {\n        _strLocalString = this._produceZZZString(_strLocalString);\n      }\n      return _strLocalString;\n    } else {\n      if (!this._booMissingLocalisationDataErrorShown) {\n        console.log('ERROR: Localisation data missing. LOCALISER._getLocalString(), localiser.js');\n        this._booMissingLocalisationDataErrorShown = true;\n      }\n      // Using variable instead of this. for consistency.\n      // LOCALISER.l_alert(\"LOCALISER_MISSING_LOCAL_STRING_ERROR\", [_strLocalisationKey]);\n      return false;\n    }\n  },\n\n  _produceZZZString: function(_strWhatSourceString) {\n    _strWhatSourceString = _strWhatSourceString.replace(/[a-zA-Z]/g, 'Z');\n    return _strWhatSourceString;\n  }\n};\n"},function(e,n,t){t(0)(t(16))},function(e,n){e.exports="/* eslint-disable no-unused-vars */\n/* global LOCALISER */\n/*\n *\n * @title Config\n * @description Configuration file for placing Global Variables to turn OFF or ON, certain\n * functionality for various classes.\n *\n *\n * @author GoMo\n * @version 2.0 17/12/12\n */\n\n/*\n ***************************  PROJECT SETTINGS ***************************\n */\n// var STR_PROJECT_ID = \"110\";\n// var STR_BASE_SERVER_PATH = \"http://internal.gomolearning.com/\";\n// The project GoMo ID\nvar STR_PROJECT_ID = '263';\n// The base server, note the required sub-directories to locate the project are automatically appended.\nvar STR_BASE_SERVER_PATH = 'http://internal.gomolearning.com/';\n\n// A flag to select whether or not to use a local or server path (see above) for loading the course,\n// topic and meta data files. Please note that if the JSON files are explicitly referenced in the head\n// then this setting will have no effect.\nvar BOO_USE_LOCAL_DATA = true;\n// As above but for all project resources such as content images, video's, PDF's etc.\nvar BOO_USE_LOCAL_RESOURCES = true;\n// A feature that appends a timestampe to the query string in order to help mitigate caching issues.\nvar BOO_ENABLE_URL_TIMESTAMPS = true;\nvar BOO_APP_VERSION = false;\nvar BOO_DYNAMIC_SCREEN_SIZE = true;\n\nvar VIDEO_FULLWINDOW_MODE = 'screen';\n\nvar POLL_CONNECTION = false;\nvar ALERT_TRACKING_ERRORS = false;\n\n// force all columns to match height\nvar MATCH_COLUMN_HEIGHT = false;\n\n// The menu introduction text, can be set in the portal (which will hide the welcome too course XXX message)\nvar BOO_ANIMATE_BASE_BACKGROUND = false;\n\n// The sequence that the components of a menu item are rendered in. Can also be used to omit items.\nvar ARR_MENU_ITEM_ORDER = ['menuTitleC', 'menuTimeC', 'menuProgressC'];\n\n// The logo filename, can be set via the portal\nvar STR_LOGO_FILEPATH = '[!LOGO_SRC!]';\n// The alt text for the logo, can be set via the portal\nvar STR_LOGO_ALT = '';\n\n// Used to only allow access to a given item if the preceding items (as defined by the order in the Portal) are completed.\n// Please note this functionality isn't 100% tested so check stability if switching on.\nvar BOO_LOCK_TOPICS = false;\n// Lock the next button in navigation until the user has completed the current screen\nvar BOO_MASTER_SCREEN_NEXT_BUTTON_LOCK = false;\n// An error message that displays if an attempt to access a topic that has been defined in the portal but not had any content\n// generated for it.\nvar STR_EMPTY_TOPIC_MESSAGE = LOCALISER.get('EMPTY_TOPIC_MESSAGE');\n\n// Legacy item, not currently used\nvar BOO_SHOW_MARKING = false;\n\n// Semi-legacy item, used in conjuction with \"BOO_USE_SPRITE_SHEET_HOTSPOTS\" it will render a set of coloured\n// overlays on top of hotspots instead of/as well as using the active and visitied images.\nvar BOO_SHOW_HIDDEN_ELEMENTS = true;\n// Configures whether or not to use the Active and Visited alt sprite versions for hotspot rendering\nvar BOO_USE_SPRITE_SHEET_HOTSPOTS = true;\n// Affects how and when assets are reset. Resetting typically involves returning the rendered element\n// to an intial state and may include destroying the state information in terms of answers/visited states.\nvar BOO_RESET_NON_ASSESSMENT_ASSET_STATES = true;\n// Resets whether a screen is completed upon return. Linked to things like the display of instruction text and tracking completion.\nvar BOO_RESET_SCREEN_COMPLETION_STATE = true;\n// Used to control whether the topic titles are rendered into the page, settable by the Portal advanced settings.\nvar BOO_SHOW_TOPIC_TITLE = false;\nvar BOO_SHOW_TOPIC_TITLE_PRIMARYTOPIC = false;\nvar BOO_SHOW_TOPIC_TITLE_MENUTOPIC = false;\n// Currenly un-used\n// REFACTOR NOTE: Add this back in once the portal is more diverse in it's settings.\nvar BOO_SHOW_TOPIC_TITLE_ON_SMARTPHONE = false;\n// Whether or not to show the title as set in the Authoring enviroment\nvar BOO_SHOW_SCREEN_TITLE = false;\nvar BOO_SHOW_SCREEN_TITLE_PRIMARYTOPIC = false;\nvar BOO_SHOW_SCREEN_TITLE_MENUTOPIC = false;\n\n// Controls how the screen title is rendered (if shown). If set to true, the screen renderer will attempt to place the screen title\n// as a single coloumn row on it's own at the top of the page.\nvar BOO_SHOW_SCREEN_TITLE_ON_ITS_OWN = false;\n\n// Controls where the screen title is rendered (if shown). If set to true, the screen renderer will attempt to place the screen title\n// external to the screenContentC.\nvar BOO_SHOW_SCREEN_TITLE_OUTSIDE_CONTENT = false;\n\n// A flag to toggle whether a screen background is set to repeat or not\nvar BOO_TILE_SCREEN_BACKGROUNDS = false;\n\n// How long should screen transition take - note that this number needs updating in screen.less for #screenBackgroundHolderL too.\nvar INT_BACKGROUND_FADE_DURATION = 500;\n\n// Footer logo src, used to switch the footer nav into a simpler layout to allow for the logo.\nvar FOOTER_LOGO = 'none';\n\n// Force the footer nav items into the same simple layout as when the logo is used to help themeing.\nvar SIMPLE_FOOTER_NAV = false;\n\n/*\n ***************************  MODE & EMULATION OPTIONS ***************************\n */\n// Semi-legacy switch that will cause the output mode checker to report\n// that the codebase is running on a smartphone. Please note it will not\n// report iOS or Android, therefore the use of this switch is not recomended\n// in preference.\nvar BOO_PRETEND_TO_BE_SMARTPHONE_PHONE = false;\n// Semi-legacy switch that will cause the output mode checker to report\n// that the codebase is running on a tablet. Please note it will not\n// report iOS or Android, therefore the use of this switch is not recomended\n// in preference.\nvar BOO_PRETEND_TO_BE_TABLET = false;\n// Semi-legacy switch that will cause the output mode checker to report\n// that the codebase is running on an iOS device. Please note it will not\n// report smartphone or tablet, therefore the use of this switch is not recomended\n// in preference.\nvar BOO_PRETEND_TO_BE_IOS = false;\n\n// Will cause the outputmode checker to report the device a Blackberry phone\nvar BOO_PRETEND_TO_BE_BLACKBERRY_PHONE = false;\n// Will cause the outputmode checker to report the device a Android phone\nvar BOO_PRETEND_TO_BE_ANDROID_PHONE = false;\n// Will cause the outputmode checker to report the device a iPhone phone\nvar BOO_PRETEND_TO_BE_IPHONE = false;\n\n// Will cause the outputmode checker to report the device a Android tablet\nvar BOO_PRETEND_TO_BE_ANDROID_TABLET = false;\n// Will cause the outputmode checker to report the device a iPhone tablet\nvar BOO_PRETEND_TO_BE_IPAD = false;\n\n// Legacy setting\nvar BOO_LOW_OS_IPAD;\n\n// REFACTOR NOTE: The setting of this seems to be somewhat odd, done as it is by screen interactions.\n// Also this isn't a config variable per se and should be moved.\nvar BOO_LOW_OS_BLACKBERRY = false;\n\n// REFACTOR NOTE: This should be a property inside the OUTPUT_MODE_CHECKER\nvar BOO_WARNINGSHOWN = false;\n// REFACTOR NOTE: This should be a property inside the OUTPUT_MODE_CHECKER\nvar STR_LOWEST_OS = 4;\n// This is the error that is alerted for low iOSD version iPads.\nvar STR_LOW_OS_WARNING_TEXT = LOCALISER.get('LOW_IOS_MESSAGE');\n\n/*\n ***************************  LAUNCHER SETTINGS ***************************\n */\n// Used by launcher.htm to determine wether to launch in a new window or replace the existing content.\nvar BOO_ALWAYS_LAUNCH_IN_NEW_WINDOW = false;\n// Used to determine whether to launch smartphone content in a new window, un-required if the LMS will be\n// doing so anyway. Please note due to the viewport meta tag, it is strongly recomended that content is\n// launched in a new window.\nvar BOO_LAUNCH_IN_NEW_WINDOW_FOR_MOBILE = false;\n// The next page to run in the launch sequence after the launcher. For desktop this could be set\n// to loader.htm or even index.htm if required.\nvar STR_LAUNCH_PAGE = 'index.htm';\n// The HTML/JS name for any popups generated. Can be tweaked as required, ensures that the window will be re-used.\nvar STR_LAUNCH_WINDOW_NAME = 'epicCourseWindow';\n// The default parameters used for the window.open command. Please note that some of these may or may not be supported depending on device/browser\nvar ARR_POPUP_CONFIG = [\n  'fullscreen=no',\n  'top=0',\n  'left=0',\n  'width=1024',\n  'height=768',\n  'location=no',\n  'menubar=no',\n  'resizable=no',\n  'status=no',\n  'titlebar=no',\n  'toolbar=no'\n];\n\n/*\n ***************************  DATA SETTINGS ***************************\n */\n// Use HTML local storage if it's supported by the device.\nvar BOO_HTML_LOCAL_STORAGE = true;\n\n/*\n ***************************  LMS CHECKER SETTINGS ***************************\n */\n// The interval between checks to try and establish if an LMS connection is still present\nvar INT_HEARTBEAT_LENGTH = 60000; // 1 minute\n// The error message displayed when extra detects an connection failure.\nvar STR_CONNECTION_LOST_TEXT = LOCALISER.get('LMS_CONNECTION_ERROR_MESSAGE');\n\n/*\n ***************************  NAVIGATION BUTTON SETTINGS ***************************\n */\n// Whether to display a graphical or numerical page counter\nvar BOO_GRAPHICAL_PAGE_COUNT = false;\n// Whether or not the page count appears in the top strap\nvar BOO_PAGE_COUNT_POSITION_TOP_STRAP = false;\n// Whether or not the page count appears within the screen (and is thus non-static if the screen is animating)\nvar BOO_PAGE_COUNT_POSITION_SCREEN = false;\n// Whether or not the page count appears in footer automatically.\nvar BOO_PAGE_COUNT_POSITION_NAV = true;\n// Whether to hide then show the next/back buttons when popups are shown (prevents accidental clicking)\nvar BOO_SMARTPHONE_HIDE_NAV_FOR_POPUPS = true;\n// Test if the Nav menu items are likely to drop on to a second line and the update the element Class Name\nvar BOO_TEST_NAV_ITEMS_OVERRUN = true;\n// Allow pagination to be navigation links\nvar BOO_ACTIVE_PAGINATION_LINKS = false;\n// Show a locked screen placeholder\nvar BOO_SHOW_LOCKED_SCREEN_PLACEHOLDER = false;\n// Wrap text asset content in a span tag for increased flexibility\nvar BOO_WRAP_TEXT_ASSET_CONTENT = false;\n// Asset padding should reflect @gomo_asset_left_right_padding & @gomo_asset_top_bottom_padding\nvar INT_LEFT_TEXT_FILL_PADDING = 20;\nvar INT_TOP_TEXT_FILL_PADDING = 20;\n// Rollback asset reset behaviour in continuous scroll topics\nvar BOO_TURN_OFF_CONTINUOUS_SCROLL_ASSET_RESET = true;\n\nvar OBJ_NAV_BUTTONS = {};\n\n// These are declared here purely for backwards compatibility!\n// In the old data the strExtrasId for back, next and menu are as defined here.\nvar OBJ_CORE_BUTTONS = {\n  objMenuButton: {\n    booDefaultDisplayButton: true,\n    intPriority: 100,\n    strExtrasId: 'menuButton',\n    strHtmlFragment: 'menu_topicTemplateC'\n  },\n  objNextButton: {\n    booDefaultDisplayButton: true,\n    intPriority: 100,\n    strExtrasId: 'nextButton',\n    strHtmlFragment: 'next_generalTemplateC',\n    strType: 'screen_navigation'\n  },\n  objBackButton: {\n    booDefaultDisplayButton: true,\n    intPriority: 100,\n    strExtrasId: 'backButton',\n    strHtmlFragment: 'back_generalTemplateC',\n    strType: 'screen_navigation'\n  }\n};\n\nvar CONTENT_TRACKING_CONFIG = {\n  enabled: false,\n  pollingInterval: 60000\n  //   stores: [{\n  //       adapter: '',\n  //       version: '',\n  //       endpoint: '',\n  //       username: '',\n  //       password: ''\n  // }]\n};\n\nvar CLOSE_METHOD = '';\n\n// ASSET BOUNDARIES are created dynamically by manifest_manager._storeManifestAssetSizeBoundaries\nvar OBJ_ASSET_BOUNDARIES = {};\n\n/*\n ***************************  UI BEHAVIOR SETTINGS ***************************\n */\n// Display scroller on the far right of the browser in desktop mode\nvar BOO_BROWSER_EDGE_SCROLLER = true;\n// Whether or not the swipe extra will try and respond to potential swipe events\nvar BOO_ENABLE_SWIPE = true;\n// Whether or not swiping on the menu will attempt to enter the next un-completed menu item\nvar BOO_ENABLE_SWIPE_MENU = true;\n\n// Toggles whether screens animate. Note that for accessible and some other output modes such as Blackberry animations in general are disabled.\nvar BOO_ANIMATE_SCREENS = true;\n// Toggles whether subscreens animate. Note that for accessible and some other output modes such as Blackberry animations in general are disabled.\nvar BOO_ANIMATE_SUBSCREENS = true;\n\n// Whether or not the popup manager will show the blanking layer when it's asked to show a given popup.\nvar BOO_BLANK_ENTIRE_PAGE = true;\n\n// A means to turn off the resize handling for Mobile devices; most likely only for debug purposes.\nvar BOO_IGNORE_RESIZE_EVENTS = true;\n\n// This will force the animation interface class to select animator.js (A javascript based animation library) over move.js (A CSS3 and where\n// possible hardware accelerated library). CSS3 animations can on occassions be buggy and whilst ideally fixing said bugs would be preferable\n// this provides another option. However please note that the performance of JS based animations on Mobile devices will be significantly reduced.\nvar BOO_FORCE_ANIMATE_API = false;\n\n// Depreciated\nvar BOO_FORCE_SHOW_COURSE_COMPLETION_BOX = false;\n\n// Currently horizontalSlide & verticalSlide\nvar STR_TRANSITION_TYPE = 'horizontalSlide';\nvar STR_DYNAMIC_TRANSITION_TYPE = null;\nvar CONTINUOUS_SCROLLING = false;\nvar CONTINUOUS_SCROLLING_TRANSITION_TYPE = 'verticalSlide';\nvar INTERACTIVE_BLANKER = false;\n\n/*\n ***************************  IMAGE PRELOADER SETTINGS ***************************\n */\n// Used to enable the image preloader. Switched off by default as it can add significantly to the load times.\nvar BOO_PRELOAD_IMAGES = false;\n// Defines the type of files that the preloader will attempt to load on course launch. Valid values are INTERFACE or ALL, however please\n// note that the INTERFACE setting currently relies on the code making assumptions based on the Epic naming convention for content images.\nvar STR_PRELOAD_TYPE_COURSE_LOAD = 'all';\n// Defines the type of files that the preloader will attempt to load on topic launch. Valid values would be TOPIC, INTERFACE or ALL, however please\n// note that the INTERFACE setting currently relies on the code making assumptions based on the Epic naming convention for content images.\nvar STR_PRELOAD_TYPE_TOPIC_LOAD = 'topic';\n// A means of toggling which preload types are available. Any that are marked un-available will simply return the specified callback and pretend\n// that the images were preloaded.\nvar OBJ_PRELOADER_CONFIG = {interface: false, topic: true, all: true};\n// Whether or not to warn when an image has failed to load, useful for debugging but generally something that should be turned off for delivery.\nvar BOO_PRELOADER_WARN_IMAGE_LOAD_FAIL = false;\n\n/*\n ***************************  IMAGE SCALING OPTIONS ***************************\n */\n// This hash table denotes the scale default factor to apply to certain asset types images in certain situations.\n// 1, 2 & 3 are for assets that sit within a page and the number denotes the number of columns in the parent screen\n// sub1, sub2 & sub3 are for assets that sit within a subscreen and the number denotes the number of columns present in the parent screen\nvar OBJ_SCALE_FACTOR_BY_MODE = {\n  1: {\n    graphicalC: 1.0,\n    accessibleC: 1.0,\n    smartphoneC: 0.27,\n    tabletC: 1.0\n  },\n  2: {\n    graphicalC: 1.0,\n    accessibleC: 1.0,\n    smartphoneC: 0.64,\n    tabletC: 1.0\n  },\n  3: {\n    graphicalC: 1.0,\n    accessibleC: 1.0,\n    smartphoneC: 1.0,\n    tabletC: 1.0\n  },\n  sub1: {\n    graphicalC: 1.0,\n    accessibleC: 1.0,\n    smartphoneC: 0.27,\n    tabletC: 1.0\n  },\n  sub2: {\n    graphicalC: 1.0,\n    accessibleC: 1.0,\n    smartphoneC: 0.64,\n    tabletC: 1.0\n  },\n  sub3: {\n    graphicalC: 1.0,\n    accessibleC: 1.0,\n    smartphoneC: 1.0,\n    tabletC: 1.0\n  }\n};\n\n// Whether or not to allow image scaling, as specified at author time, in specific modes. Can be used to add image specific scale factors that\n// would only apply to a given output or to supply higher res images for things like the iPad.\nvar OBJ_INDIVIDUAL_ASSET_SCALING_BY_MODE = {\n  graphicalC: true,\n  accessibleC: true,\n  smartphoneC: true,\n  tabletC: true\n};\n\n/*\n ***************************  VIDEO SETTINGS ***************************\n */\n// A pair of variabled that define the width and height of the inpage video for desktop/tablet.\nvar INT_VIDEO_WIDTH = 360;\nvar INT_VIDEO_HEIGHT = 203;\n// A pair of variabled that define the width and height of the popup video for desktop/tablet.\nvar INT_POPUP_VIDEO_WIDTH = 480;\nvar INT_POPUP_VIDEO_HEIGHT = 300;\n// A pair of variables that define the video size for smartphones; note these may well be redundant in many cases\n// due to the unique way many smartphone manufacturers have decided to make video behave.\nvar INT_SMARTPHONE_VIDEO_WIDTH = 300;\nvar INT_SMARTPHONE_VIDEO_HEIGHT = 200;\n// Legacy setting, not currently used.\nvar BOO_ALWAYS_SHOW_TRANSCRIPT = false;\n// Legacy setting, not currently used.\nvar BOO_ALWAYS_SHOW_TRANSCRIPT_BTN = true;\n// Whether or not too add a play icon overlay to the thumbnail images specified for video.\nvar BOO_ADD_VIDEO_PLAY_ICON_TO_THUMBS = true;\n// Can be used to attempt to scale video as per the OBJ_SCALE_FACTOR_BY_MODE settings. Experimental.\nvar BOO_SCALE_VIDEO_ASSETS = false;\n// Some devices will break the page if autoplay is enabled so we can switch it off here.\nvar BOO_ALLOW_AUTOPLAY_VIDEOS = true;\n\n/*\n *************************** SWF/SWIFFY SETTINGS ***************************\n */\n// Mainly for test purposes, this will force the showing of SWIFFY animations in all modes\nvar BOO_FORCE_SHOW_SWIFFY = false;\n// A hash table to determine when to use SWF's by output mode. Note that if neither SWFs or SWIFFY are used then the fallback Image/Text will be used instead.\nvar OBJ_SWF_EMBED_BY_MODE = {\n  graphicalC: true,\n  accessibleC: false,\n  smartphoneC: false,\n  tabletC: false\n};\n// A hash table to determine when to use SWIFFY's by output mode. Note that if neither SWFs or SWIFFY are used then the fallback Image/Text will be used instead.\nvar OBJ_SWIFFY_EMBED_BY_MODE = {\n  graphicalC: false,\n  accessibleC: false,\n  smartphoneC: true,\n  tabletC: true\n};\n\n/*\n *************************** FILMSTRIP SETTINGS ***************************\n */\n// If switched on, will attempt to use Javascript to set the heights for the filmstrip based on the largest image used. Potentially buggy / layout breaking\nvar BOO_SMART_FIT_FILMSTRIP = false;\n// A pair of variables to describe whether to center smaller images horizontally or vertically. Will only be applied if BOO_SMART_FIT_FILMSTRIP is switched on.\nvar BOO_CENTER_FILMSTRIP_IMAGES_HORIZONTALLY = true;\nvar BOO_CENTER_FILMSTRIP_IMAGES_VERTICALLY = false;\n\n// If set to true, will add the step title above each step in accessible / smartphone modes. Takes up additional screen space but can add clarity.\nvar BOO_INCLUDE_FILMSTRIP_STEP_HEADINGS = true;\n// Whether or not to show and update the step numbers for the filmstrip\nvar BOO_SHOW_FILMSTRIP_STEP_NUMBERS = true;\n\n/*\n *************************** PROXIMITY HOT GRAPHIC ASSET SETTINGS ***************************\n */\n// Controls whether or not the subscreen title is rendered as part of the subscreen content for proximity hotgraphic subscreens.\nvar BOO_SHOW_SUB_SCREEN_TITLES_IN_PROXIMITY_HOT_GRAPHIC = false;\n\n/*\n *************************** VIDEO ASSET SETTINGS ***************************\n */\n// The filepath for the default thumb, used when one isn't specified in the authoring enviroment but is required for a given situation.\nvar STR_DEFAULT_VIDEO_PLACEHOLDER = 'video_default_thumb.png';\n// The width and height of the default thumb.\nvar INT_DEFAULT_VIDEO_PLACEHOLDER_WIDTH = 256;\nvar INT_DEFAULT_VIDEO_PLACEHOLDER_HEIGHT = 256;\n\n/*\n *************************** GENERIC ASSET SETTINGS ***************************\n */\n// REFACTOR NOTE: This is purely for the transition from grouped to non-grouped assets\n// and should be deleted at the opportune moment\n// It describes which assets belong to which asset groups and is used for generic functionality like \"reset questions\".\nvar OBJ_LEGACY_GROUP_DATA = {\n  text: 'standard',\n  image: 'standard',\n  hottext: 'standard',\n  video: 'av',\n  sfl: 'question',\n  mcq: 'question',\n  graphicalmcq: 'question',\n  assessmentintro: 'assessment',\n  assessmentresults: 'assessment',\n  expert: 'nonrendering',\n  casestudy: 'nonrendering',\n  audioplayer: 'av',\n  electure: 'av',\n  resource: 'nonrendering',\n  proximityhotgraphic: 'standard',\n  clickandstick: 'question',\n  filmstrip: 'standard',\n  swfembed: 'av',\n  branchingmenu: 'branching',\n  branchingnavigation: 'branching',\n  comicstrip: 'other'\n};\nvar BOO_ANIMATE_ASSETS_EVERY_VISIT = false;\nvar BOO_RESET_ASSET_INTERACTED = false;\n\n/*\n ***************************  LINEAR BEHAVIOR SETTINGS ***************************\n */\n// Toggles between topic completion being marked purely on visited the last page or that all screens have to have been marked\n// as visited.\nvar BOO_LINEAR_COMPLETE_ON_LAST_PAGE = true;\n\n/*\n ***************************  ASSESSMENT BEHAVIOR SETTINGS ***************************\n */\n// A pair of variables that shouldn't be requried as these values are over-ridden by the values in an assessment results asset by default.\nvar INT_DEFAULT_GOOD_PASS = 100;\nvar INT_DEFAULT_BASE_PASS = 80;\n\n// A debug option to force non-randomised assessments even if they've been selected in the Authoring\nvar BOO_FORCE_NON_RANDOMISED_ASSESSMENT = false;\n// A debug option to force all screens to be shown even if the option to only select a range has been choosen.\nvar BOO_FORCE_SHOW_ENTIRE_ASSESSMENT = false;\n// Whether to make the confirm button also behave like a next button in assessments\nvar BOO_PROGRESS_ON_CONFIRM_CLICK = false;\n// Show the correctness markers when a question has been answered\nvar BOO_SHOW_CORRECTNESS_ICONS_ON_CONFIRM_CLICK = false;\n// Shows the image specified in the assessment intro asset and hides the next button for the first\n// page of an assessment\nvar BOO_SHOW_ASSESSMENT_START_BUTTON = true; // Shows the assessment intro start button instead of the next button, also stops none question pages losing next button\n// Show the next button when there is no question on the page\nvar BOO_SHOW_ASSESSMENT_NEXT_ON_NON_QUESTION_PAGE = true;\n// Hides the next button until confirm is pressed.\nvar BOO_HIDE_NEXT_UNTIL_CONFIRM = true;\n// Hides next and back buttons completly within assessments and prevents the topic manager from showing them.\nvar BOO_HIDE_ALL_NAVIGATION = false;\n// If set to false, assessment topics are marked as complete upon last page visited as well as on pass.\nvar BOO_MARK_ASSESSMENT_TOPICS_COMPLETE_ON_PASS = true;\n// An override for assets to limit the number of attempts in an assessment to 1. Please note this currently only\n// applies to MCQ (Graphical and normal), SFL (Graphical and normal), Matching pairs and Dropdowns on graphic.\nvar BOO_SINGLE_ATTEMPT_IN_ASSESSMENT = false;\n\n/*\n *************************** MENU BEHAVIOUR SETTINGS ***************************\n */\n// Stops popup topics being launched from the menu, is unlikely to be of much use as in that instance popup\n// topics should be filtered out\n// from the menu.\nvar BOO_LOCK_POPUP_TOPICS_FROM_MENU = false;\n\n/*\n *************************** BRANCHING BEHAVIOUR SETTINGS ***************************\n */\n// This will always hide the back button preventing the user retracing their steps. Could be useful if the\n// exercise at hand was a simulation that was somehow scored with custom functionality.\nvar BOO_ALWAYS_HIDE_BACK_BUTTON = false;\n\n/*\n *************************** VIEWPORT SETTINGS ***************************\n */\n// A default value used for the iPad viewport meta\nvar INT_CONTENT_WIDTH = 995;\n\n// A hash table to determine whether to start the screen checking setInterval base dheartbeat. This will\n// re-check the orientation and screen dimensions every 2 seconds and is required to mitigate dysfunctional\n// and buggy features in some older android browsers.\nvar OBJ_SCREEN_CHECKING_HEARTBEAT_BY_MODE = {\n  smartphoneC: {\n    androidC: true,\n    iPhoneC: false\n  },\n  tabletC: {\n    androidC: false,\n    iPadC: false\n  }\n};\n\n/*\n *************************** DEVELOPMENT HELPER SETTINGS ***************************\n */\n// A build time flag to determine whether any screens without assets have been found.\nvar BOO_ALERT_ASSETLESS_SCREENS = false;\n// This toggles the warning about images that are found that aren't in the image meta data manifest generated by the portal.\n// This would typically be an image that didn't exist but may also indicate issues with the portal. It is a build time only\n// message that shouldn't be enabled for release.\nvar BOO_ALERT_MISSING_META_DATA = false;\n// Whether or not to alert the fact a project hasn't had a meta data file generated by the portal. Mostly depriciated.\nvar BOO_ALERT_EMPTY_META_DATA = false;\n\n// Whether or not to show an alert with unhandled events. Useful at build time to track down issues with the event model.\nvar BOO_ALERT_UNHANDLED_EVENTS = false;\n\n// Depriciated\nvar BOO_ALERT_MISSING_IMAGES = false;\n\n// Whether or not to show the reload button that reloads the course and returns to that page. Useful for debug/testing/build time,\n// should always be switched off for release.\nvar BOO_SHOW_RELOAD_BUTTON = false;\n\n// Adds a title field based tooltip to menu items denoting their Portal based IDs, should be switched off for release.\nvar BOO_SHOW_TOPIC_ID = false;\n// Add a text area to the screen with it's current ID. VERY useful for build time, should be switched off for release.\nvar BOO_SHOW_SCREEN_ID = false;\n// Not used currently\nvar BOO_SHOW_ASSET_ID = false;\n// A buildtime/test time flag that many, if not all, question types should adhere to whereby a highlight or some form of\n// artifact should be added denoting the correct options for a question. Should be switched off for release.\nvar BOO_HIGHLIGHT_CORRECT_ANSWER = true;\n\n// Whether or not to show the \"missing help data\" messages\nvar BOO_REPORT_MISSING_HELP_DATA = false;\n\n// Adds a title field based tooltip to branching menu items denoting the target ID's as set in the Authoring enviroment.\n//  Should be switched off for release.\nvar BOO_SHOW_BRANCH_TARGET_IDS = false;\n\n// Switches on or off the showing of debug messages via debugger.js. A fairly irrelevant flag currently as debug messages\n// are rather sparse.\nvar BOO_SHOW_DEBUG = false;\n\n// Whether or not to attempt reload images if they initially fail. Experimental feature designed to mitigate the dysfunction\n// of poor mobile connectivity in some enviroments.\nvar BOO_IMAGE_RELOAD = true;\n// A developer debug setting to switch on the collection of codebase triggered events by the event manager. WARNING: DO NOT\n// LEAVE THIS ON, it will cause a large number of event records to accumulate in a relatively short space of time and will\n// thus cause memory issues.\nvar BOO_LOG_EVENTS = false;\n\n// Replaces the [!XXXXX!] PHP Process markup with the dummy values below; used purely for demo purposes.\nvar BOO_FAKE_PHP_PROCESS_VALUES_FOR_REVIEW = false;\n\nvar STR_LOGO_FILEPATH_FOR_REVIEW = 'logo.png';\nvar STR_LOGO_ALT_FOR_REVIEW = 'Logo';\nvar STR_PROJECT_NAME_FOR_REVIEW = 'Project Name';\n\n/*\n *************************** LOCALISER SETTINGS ***************************\n */\n// Used to debug the localisation strings; will replace all localised items with a number of Z characters equal to\n// the phrase length of the localised term. Whitespace should be preserved, so some sense of the original remains.\n// Any remaining copy either comes from the portal or has been overlooked in the localisation process.\nvar BOO_PRODUCE_ALL_ZZZ = false;\n\n// New desktop glossary layout\nvar SIMPLE_GLOSSARY_LAYOUT = false;\n// Render whitespace for an empty control\nvar EMPTY_CONTROL_WHITESPACE = false;\n// Split header layout.\nvar USE_SPLIT_HEADER = false;\nvar SPLIT_HEADER_A_NAV_ITEMS = false;\n// Footer floats over content.\nvar FLOATING_FOOTER = false;\n// Render all controls into a header. No footer will be built.\nvar JOINT_CONTROL_BAR_HEADER = false;\n// Drawer slide out menu on mobile.\n// Render page count with the screen navigation, not in a header or footer.\nvar PAGE_COUNT_WITH_NAVIGATION = false;\n// Drawer slide out menu on mobile.\nvar MOBILE_DRAWER_MENU = false;\n// TOC slide over content animation style.\nvar TOC_SLIDE_ANIMATION = false;\n/* New glossary layout */\nvar MOBILE_INTERACTIVE_GLOSSARY = false;\n// Alternative search layout\nvar CONCISE_SEARCH_LAYOUT = false;\n// Visit history in suspend data\nvar ENABLE_VISIT_HISTORY = false;\n// Panel glossary layout\nvar PANEL_GLOSSARY_LAYOUT = false;\n"},function(e,n,t){t(0)(t(18))},function(e,n){e.exports="/* eslint-disable new-cap */\n/* eslint-disable no-global-assign */\n/* globals EM, CONTENT_TRACKING, LOCALISER, SCROLLING_MANAGER, jQuery, BrowserDetect, MobileEsp,\nBOO_PRETEND_TO_BE_IPAD, BOO_PRETEND_TO_BE_TABLET, BOO_PRETEND_TO_BE_IPHONE,\nBOO_PRETEND_TO_BE_ANDROID_PHONE, BOO_PRETEND_TO_BE_BLACKBERRY_PHONE,\nBOO_PRETEND_TO_BE_SMARTPHONE_PHONE, BOO_PRETEND_TO_BE_ANDROID_TABLET, STR_LOWEST_OS,\nBOO_WARNINGSHOWN, STR_LOW_OS_WARNING_TEXT, BOO_PRETEND_TO_BE_IOS, head,\nBOO_DYNAMIC_CONTINUOUS_SCROLLING $, BOO_APP_VERSION, BOO_BROWSER_EDGE_SCROLLER,\nCUSTOM_SCROLLER_STYLE, DEBUG, Modernizr, PREVIEW_DATA, MOBILE_DRAWER_MENU, SCREEN_INTERACTIONS,\nTOP_STRAP_RENDERER, TOPIC_MANAGER, BOTTOM_STRAP_RENDERER */\n/**\n * @title Output Mode Checker\n * @description Output mode checker allows queries for the\n * device/OS/version/browser the user is using.\n * It also runs on load and sets CSS values with this info.\n *\n * @author GoMo\n * @version 1.0 10-12-12\n * @version 2.0 20-12-12 - James Hough - Check for android device and set in CSS.\n * Also check if device is has rendering issues on animation.\n */\n\nvar OUTPUT_MODE_CHECKER = {\n  strObjID: 'The output mode checker',\n  strObjDescription: 'The object that determines the current output mode',\n\n  _strGraphicalMode: 'graphicalC',\n  _strAccessibleMode: 'accessibleC',\n  _strSmartphoneMode: 'smartphoneC',\n  _strTabletMode: 'tabletC',\n  _strNoIScroll: 'noIScrollDevice',\n\n  strCurrentMode: 'graphicalC',\n  booPreviewMode: false,\n  animationEnabled: true,\n\n  strPreviousScreenSize: 'defaultChecker',\n  strCurrentScreenSize: '',\n  strScreenSizeLarge: 'large',\n  strScreenSizeMedium: 'medium',\n  strScreenSizeSmall: 'small',\n  /* The screensize variables are also set in css/global-variables-gomo.less\n   * They may be overriden in theme_overrides/css/global-variables-theme.less\n   */\n  objScreenSizeBoundaries: {},\n  arrScreensizeChangedCallbacks: [],\n  intLargeScreenMin: 1100,\n  intMediumScreenMax: 1099,\n  intMediumScreenMin: 500,\n  intSmallScreenMax: 499,\n\n  strWhatOSClass: '',\n  strWhatBrowserTypeClass: '',\n  strWhatBrowserVersionClass: '',\n  strWhatAndroidVersion: '',\n  strWhatAndroidVersionThreeDigit: '',\n\n  _strOSTagID: 'operatingSystemL',\n  _strOSVersionTagID: 'operatingSystemVersionL',\n\n  _strBrowserTypeTagID: 'browserTypeL',\n  _strBrowserVersionTagID: 'browserVersionL',\n  _strOutputModeTagID: 'outputModeL',\n\n  strAppFilePrefix: '',\n\n  _strUserVersionChoice: null,\n\n  // _objFramesetDOM : null,\n  _domBodyTag: null,\n  _objCurrDOM: null,\n\n  _booModeChangeLocked: false,\n\n  strClassName: '',\n\n  handleEvent_updateAnimationLock: function(_booAnimationLockState) {\n    this._booModeChangeLocked = _booAnimationLockState;\n  },\n\n  handleEvent_primeDOMReferences: function(_objWhatContentDOM) {\n    this._objCurrDOM = _objWhatContentDOM;\n    this._domBodyTag = this._objCurrDOM.getElementsByTagName('body')[0];\n    if (this.isIOSDevice()) {\n      this._domBodyTag.onscroll = function(_objEvent) {\n        scrollTo(0, 0);\n        _objEvent.preventDefault();\n      };\n    }\n\n    if (!window.console) {\n      window.console = {};\n    }\n    if (!window.console.log) {\n      window.console.log = function() {};\n    }\n  },\n\n  handleEvent_userVersionChoice: function(_objOptionsData) {\n    var _strWhatOutputMode;\n    var _booSurpressReRender;\n    if (this._booModeChangeLocked) {\n      if (_objOptionsData.funCallBack) {\n        _objOptionsData.funCallBack();\n      }\n      return;\n    }\n\n    if (_objOptionsData.booTriggeredByActionsObj) {\n      _strWhatOutputMode =\n        _objOptionsData.objActionTriggerParams['strWhatVersionChoice'];\n      _booSurpressReRender =\n        _objOptionsData.objActionTriggerParams['booSurpressReRender'];\n    } else {\n      _strWhatOutputMode = _objOptionsData['strWhatVersionChoice'];\n      _booSurpressReRender = _objOptionsData['booSurpressReRender'];\n    }\n\n    this.animationEnabled =\n      _strWhatOutputMode !== 'accessible' && !PREVIEW_DATA.editorMode;\n\n    switch (_strWhatOutputMode) {\n      case 'graphical':\n        this.strCurrentMode = this._strGraphicalMode;\n        this._strUserVersionChoice = this._strGraphicalMode;\n        EM.trigger('outputModeChanged', {\n          strNewOutputMode: this.strCurrentMode,\n          booSurpressReRendering: _booSurpressReRender\n        });\n        CONTENT_TRACKING.state.add('strUserVersionChoice', this.strCurrentMode);\n        break;\n      case 'accessible':\n        this.strCurrentMode = this._strAccessibleMode;\n        this._strUserVersionChoice = this._strAccessibleMode;\n        EM.trigger('outputModeChanged', {\n          strNewOutputMode: this.strCurrentMode,\n          booSurpressReRendering: _booSurpressReRender\n        });\n        CONTENT_TRACKING.state.add('strUserVersionChoice', this.strCurrentMode);\n        break;\n      case 'smartphone':\n        this.strCurrentMode = this._strSmartphoneMode;\n        this._strUserVersionChoice = this._strSmartphoneMode;\n        EM.trigger('outputModeChanged', {\n          strNewOutputMode: this.strCurrentMode,\n          booSurpressReRendering: _booSurpressReRender\n        });\n        CONTENT_TRACKING.state.add('strUserVersionChoice', this.strCurrentMode);\n        break;\n      case 'tablet':\n        this.strCurrentMode = this._strTabletMode;\n        this._strUserVersionChoice = this._strTabletMode;\n        EM.trigger('outputModeChanged', {\n          strNewOutputMode: this.strCurrentMode,\n          booSurpressReRendering: _booSurpressReRender\n        });\n        CONTENT_TRACKING.state.add('strUserVersionChoice', this.strCurrentMode);\n        break;\n      default:\n        // alert(\"ERROR: Unkown type of output mode '\" + _strWhatOutputMode + \"' found in OUTPUT_MODE_CHECKER.handleEvent_userVersionChoice(), output_mode_checker.js\");\n        LOCALISER.l_alert('OUTPUT_MODE_CHECKER_UNKNOWN_OUTPUT_MODE_ERROR', [\n          _strWhatOutputMode\n        ]);\n        break;\n    }\n    this._applyModeClass();\n    // Set the screen polling after everythings rerendered - timeout required as MASTER_RENDERER.handleEvent_outputModeChanged() uses one\n    window.setTimeout('OUTPUT_MODE_CHECKER.rerenderedTopic()', 0);\n\n    if (_objOptionsData.booTriggeredByActionsObj) {\n      _objOptionsData.funCallBack();\n    }\n\n    if (typeof gomo.outputChecker !== 'undefined') {\n      gomo.outputChecker.updateOutputVariables();\n    }\n  },\n\n  rerenderedTopic: function() {\n    SCROLLING_MANAGER.pollScreenScrolling(null, true);\n  },\n\n  handleEvent_startedTracking: function() {\n    var versionChoice = CONTENT_TRACKING.state.get('strUserVersionChoice');\n    if (versionChoice) {\n      this._strUserVersionChoice = versionChoice;\n    }\n  },\n\n  setVersionClasses: function(\n    _strWhatOSClass,\n    _strWhatBrowserTypeClass,\n    _strWhatBrowserVersionClass\n  ) {\n    if (\n      _strWhatBrowserTypeClass == 'ie7C' ||\n      _strWhatBrowserTypeClass == 'ie8C'\n    ) {\n      var _objDoubleCheckedBrowserClasses = this._setIE8IsALiar();\n\n      _strWhatBrowserTypeClass =\n        _objDoubleCheckedBrowserClasses['strBrowserTypeClass'];\n      _strWhatBrowserVersionClass =\n        _objDoubleCheckedBrowserClasses['strBrowserVersionClass'];\n    }\n\n    this.strWhatOSClass = _strWhatOSClass;\n    this.strWhatBrowserTypeClass = _strWhatBrowserTypeClass;\n    this.strWhatBrowserVersionClass = _strWhatBrowserVersionClass;\n\n    // iOS7 height 100% overflowing page bug fix\n    if (\n      OUTPUT_MODE_CHECKER.strWhatBrowserTypeClass == 'safariC' &&\n      OUTPUT_MODE_CHECKER.strWhatBrowserVersionClass == 'browserVersion_7_C' &&\n      OUTPUT_MODE_CHECKER.strWhatOSClass == 'iPadC'\n    ) {\n      jQuery('html').addClass('ipadIos7C');\n    }\n\n    if (typeof gomo.outputChecker !== 'undefined') {\n      gomo.outputChecker.updateOutputVariables();\n    }\n  },\n\n  checkOutputMode: function() {\n    BrowserDetect.init();\n\n    if (this.isSmartPhone()) {\n      // alert(\"WARNING: The smartphone output is currently under development.\")\n      this.strCurrentMode = this._strSmartphoneMode;\n      this._getAndroidVersion();\n      // this._setMetaTag(\"smartphone\");\n    } else if (\n      // eslint-disable-next-line new-cap\n      MobileEsp.DetectTierTablet() ||\n      this.isWindowsTablet() ||\n      this.isModernIos() ||\n      BOO_PRETEND_TO_BE_IPAD ||\n      BOO_PRETEND_TO_BE_TABLET\n    ) {\n      this.strCurrentMode = this._strTabletMode;\n      if (!BOO_PRETEND_TO_BE_IPAD) {\n        this.isLowOSIpad();\n      }\n      // this._setMetaTag(\"tablet\");\n    } else {\n      if (this._strUserVersionChoice) {\n        this.strCurrentMode = this._strUserVersionChoice;\n      } else {\n        // If there is no choice saved, default to graphical.\n        this.strCurrentMode = this._strGraphicalMode;\n      }\n    }\n    this._applyIScrollModeClass();\n    this._applyBrowserVersionClasses();\n    this._applyModeClass();\n    this._applyAppFilePrefix();\n\n    EM.trigger('outputModeChanged', {\n      strNewOutputMode: this.strCurrentMode,\n      booSurpressReRendering: true\n    });\n  },\n\n  pollScreenSize: function() {\n    var _objOptions = {\n      strTitle: 'defaultChecker',\n      intLargeScreenMin: this.intLargeScreenMin,\n      intSmallScreenMax: this.intSmallScreenMax,\n      funCallBack: function() {\n        OUTPUT_MODE_CHECKER.strCurrentScreenSize =\n          OUTPUT_MODE_CHECKER.objScreenSizeBoundaries.defaultChecker.strCurrentLayoutSize;\n        var updatedData = {\n          domUpdateElement: jQuery(window),\n          strUpdateElementType: 'screen',\n          strUpdatedScreenSize: OUTPUT_MODE_CHECKER.strCurrentScreenSize\n        };\n        EM.trigger('screenSizeChanged', updatedData);\n        gomo.assetManager.raiseEvents('screenSizeChanged', updatedData);\n      }\n    };\n    this.setNewScreenSizeBoundary(_objOptions);\n\n    jQuery(window).resize(function() {\n      OUTPUT_MODE_CHECKER._checkForElementSizeUpdates();\n      OUTPUT_MODE_CHECKER._callbackScreensizeChanged();\n      EM.trigger('screenResize');\n    });\n  },\n\n  manualScreenSizeCheck: function() {\n    this._checkForElementSizeUpdates();\n  },\n\n  resetScreenSizeCheckObj: function() {\n    var _objTempWindowBoundary = this.objScreenSizeBoundaries.defaultChecker;\n    this.objScreenSizeBoundaries = {};\n    this.objScreenSizeBoundaries.defaultChecker = _objTempWindowBoundary;\n\n    this.arrScreensizeChangedCallbacks = [];\n  },\n\n  setNewScreenSizeBoundary: function(_objOptions) {\n    /* HELP - object definition:\n  /* Options Object =\n  /* {'strTitle':'comicstrip',\n  /* 'intLargeScreenMin':_intSmallestImage,\n  /* 'intSmallScreenMax':(_intSmallestImage-1),\n  /* 'funCallBack':{}}\n  */\n    if (_objOptions.objRawAssetData) {\n      _objOptions.objRawAssetData.strBoundaryId =\n        this.getScreenSizeBoundaryTitle(_objOptions.objRawAssetData);\n    }\n\n    if (_objOptions.strTitle) {\n      // do nothing as functions may be rechecking the same elementID for different\n      // width. See ASSET_INTERACTIONS.testAssetsBoundarySize() for example.\n    } else if (\n      _objOptions.objRawAssetData &&\n      _objOptions.objRawAssetData.strBoundaryId\n    ) {\n      _objOptions.strTitle = _objOptions.objRawAssetData.strBoundaryId;\n    } else {\n      // The set function can't continue without a title\n      return;\n    }\n\n    if (this.objScreenSizeBoundaries[_objOptions.strTitle]) {\n      // Don't overwrite the last setting. Wait for a screen reset.\n      return;\n    } else {\n      this.objScreenSizeBoundaries[_objOptions.strTitle] = {};\n\n      if (_objOptions.strDomId) {\n        this.objScreenSizeBoundaries[_objOptions.strTitle].strDomId =\n          _objOptions.strDomId;\n      }\n\n      this.objScreenSizeBoundaries[_objOptions.strTitle].strPreviousLayoutSize =\n        'defaultChecker';\n      this.objScreenSizeBoundaries[_objOptions.strTitle].intLargeScreenMin =\n        this.intLargeScreenMin;\n      this.objScreenSizeBoundaries[_objOptions.strTitle].intSmallScreenMax =\n        this.intSmallScreenMax;\n\n      if (_objOptions.intLargeScreenMin) {\n        this.objScreenSizeBoundaries[_objOptions.strTitle].intLargeScreenMin =\n          _objOptions.intLargeScreenMin;\n      }\n      if (_objOptions.intSmallScreenMax) {\n        this.objScreenSizeBoundaries[_objOptions.strTitle].intSmallScreenMax =\n          _objOptions.intSmallScreenMax;\n      }\n\n      if (_objOptions.funCallBack) {\n        this.objScreenSizeBoundaries[_objOptions.strTitle].funCallBack =\n          _objOptions.funCallBack;\n        this.objScreenSizeBoundaries[\n          _objOptions.strTitle\n        ].objOptionalFunParameter = _objOptions.objOptionalFunParameter;\n      }\n    }\n  },\n\n  setPreviewMode: function(previewModeSetting) {\n    this.booPreviewMode = previewModeSetting;\n  },\n\n  setDeviceType: function(type) {\n    switch (type) {\n      case 'desktop':\n        BOO_PRETEND_TO_BE_TABLET = false;\n        BOO_PRETEND_TO_BE_SMARTPHONE_PHONE = false;\n        break;\n      case 'tablet':\n        BOO_PRETEND_TO_BE_TABLET = true;\n        BOO_PRETEND_TO_BE_SMARTPHONE_PHONE = false;\n        break;\n      case 'smartphone':\n        BOO_PRETEND_TO_BE_TABLET = false;\n        BOO_PRETEND_TO_BE_SMARTPHONE_PHONE = true;\n        break;\n    }\n\n    this.checkOutputMode();\n    var screenHolderEl = $('#screenHolderL');\n    if (MOBILE_DRAWER_MENU && this.isSmartPhone()) {\n      // Hide the nav so we can show it later if we return to desktop / tablet mode\n      $('#navWrapperL').hide();\n      // Replace classnames with something we can switch back if we return to desktop / tablet mode\n      if (screenHolderEl.hasClass('hasTopStrap')) {\n        screenHolderEl\n          .removeClass('hasTopStrap')\n          .addClass('hasTopStrapDisabled');\n      }\n      if (screenHolderEl.hasClass('hasBottomStrap')) {\n        screenHolderEl\n          .removeClass('hasBottomStrap')\n          .addClass('hasBottomStrapDisabled');\n      }\n    } else {\n      // Toggle classnames back if they've been previously disabled\n      if (screenHolderEl.hasClass('hasTopStrapDisabled')) {\n        screenHolderEl\n          .removeClass('hasTopStrapDisabled')\n          .addClass('hasTopStrap');\n      }\n      if (screenHolderEl.hasClass('hasBottomStrapDisabled')) {\n        screenHolderEl\n          .removeClass('hasBottomStrapDisabled')\n          .addClass('hasBottomStrap');\n      }\n      $('.drawer-menu__bar').hide();\n      EM.trigger('rebuildNavMenu', SCREEN_INTERACTIONS.getCurrentScreenData());\n      TOP_STRAP_RENDERER.rerenderNav(TOPIC_MANAGER.getCurrentTopic());\n      BOTTOM_STRAP_RENDERER.rerenderNav(TOPIC_MANAGER.getCurrentTopic());\n    }\n\n    // Trigger a screen resize to rerender anything that needs it\n    var updatedData = {\n      domUpdateElement: jQuery(window),\n      strUpdateElementType: 'screen',\n      strUpdatedScreenSize: OUTPUT_MODE_CHECKER.strCurrentScreenSize\n    };\n    EM.trigger('screenSizeChanged', updatedData);\n    gomo.assetManager.raiseEvents('screenSizeChanged', updatedData);\n  },\n\n  setNewScreensizeChangeCallback: function(_objCallback) {\n    this.arrScreensizeChangedCallbacks.push(_objCallback);\n  },\n\n  getScreenSizeBoundaryTitle: function(_objAssetRawData) {\n    var strBoundaryId = _objAssetRawData.strType + '_' + _objAssetRawData.strID;\n\n    return strBoundaryId;\n  },\n\n  getScreenDimensions: function() {\n    var _intViewportWidth;\n    var _intViewportHeight;\n\n    // the more standards compliant browsers (mozilla/netscape/opera/IE7) use window.innerWidth and window.innerHeight\n    if (typeof window.innerWidth != 'undefined') {\n      (_intViewportWidth = window.innerWidth),\n      (_intViewportHeight = window.innerHeight);\n    } else if (\n      // IE6 in standards compliant mode (i.e. with a valid doctype as the first line in the document)\n      typeof document.documentElement != 'undefined' &&\n      typeof document.documentElement.clientWidth != 'undefined' &&\n      document.documentElement.clientWidth != 0\n    ) {\n      (_intViewportWidth = document.documentElement.clientWidth),\n      (_intViewportHeight = document.documentElement.clientHeight);\n    } else {\n      // older versions of IE\n      (_intViewportWidth =\n        document.getElementsByTagName('body')[0].clientWidth),\n      (_intViewportHeight =\n          document.getElementsByTagName('body')[0].clientHeight);\n    }\n\n    return {\n      intViewportWidth: _intViewportWidth,\n      intViewportHeight: _intViewportHeight\n    };\n  },\n\n  isDesktop: function() {\n    if (!this.isTablet() && !this.isSmartPhone()) {\n      return true;\n    }\n\n    return false;\n  },\n\n  isSmartPhone: function() {\n    // eslint-disable-next-line new-cap\n    if (MobileEsp.DetectSmartphone()) {\n      return true;\n    }\n\n    if (\n      BOO_PRETEND_TO_BE_IPHONE ||\n      BOO_PRETEND_TO_BE_ANDROID_PHONE ||\n      BOO_PRETEND_TO_BE_BLACKBERRY_PHONE ||\n      BOO_PRETEND_TO_BE_SMARTPHONE_PHONE\n    ) {\n      return true;\n    }\n    return false;\n  },\n\n  isTablet: function() {\n    if (\n      (MobileEsp.DetectTierTablet() ||\n        this.isWindowsTablet() ||\n        this.isModernIos()) &&\n      !MobileEsp.DetectBlackBerryTablet()\n    ) {\n      return true;\n    }\n\n    if (\n      BOO_PRETEND_TO_BE_ANDROID_TABLET ||\n      BOO_PRETEND_TO_BE_IPAD ||\n      BOO_PRETEND_TO_BE_TABLET\n    ) {\n      return true;\n    }\n\n    return false;\n  },\n\n  // Is iOS 13.6 or above\n  isModernIos: function() {\n    if (this.getClientOs() === 'MacOS' && navigator.maxTouchPoints > 0) {\n      return true;\n    }\n    return false;\n  },\n\n  /* Refactor Note: we need to remove device types and move over to modernizer as we can't reliable support everything */\n  isWindowsTablet: function() {\n    var _strUserAgent = '';\n    if (navigator && navigator.userAgent) {\n      _strUserAgent = navigator.userAgent.toLowerCase();\n    }\n    // WOW64 || Win64 = desktop mode\n    if (\n      _strUserAgent.indexOf('windows') != -1 &&\n      _strUserAgent.indexOf('touch') != -1 &&\n      _strUserAgent.indexOf('wow64') == -1 &&\n      _strUserAgent.indexOf('win64') == -1\n    ) {\n      return true;\n    }\n    return false;\n  },\n\n  isIPad: function() {\n    // eslint-disable-next-line new-cap\n    if (MobileEsp.DetectIpad()) {\n      return true;\n    }\n    return false;\n  },\n\n  isLowOSIpad: function() {\n    var _strUserAgentString = navigator.userAgent;\n    var _strSlice = '';\n    if (_strUserAgentString.indexOf('iPad') > -1) {\n      // finding the OS version ie 4_3_1\n      _strSlice = _strUserAgentString.split('OS ')[1];\n      _strSlice = _strSlice.split(' like')[0];\n      // just take the major version number, ie 4\n      _strSlice = _strSlice.split('_')[0] * 1;\n      if (_strSlice < STR_LOWEST_OS) {\n        if (!BOO_WARNINGSHOWN) {\n          alert(STR_LOW_OS_WARNING_TEXT);\n          // eslint-disable-next-line no-global-assign\n          BOO_WARNINGSHOWN = true;\n          return true;\n        }\n        return true;\n      }\n      return false;\n    }\n    return false;\n  },\n\n  isBlackberryPhone: function() {\n    // eslint-disable-next-line new-cap\n    if (MobileEsp.DetectBlackBerry() || BOO_PRETEND_TO_BE_BLACKBERRY_PHONE) {\n      return true;\n    }\n    return false;\n  },\n\n  isLowOSBlackberry: function() {\n    var _strUserAgentString = navigator.userAgent;\n    if (_strUserAgentString.indexOf('BlackBerry') > -1) {\n      if (_strUserAgentString.indexOf('WebKit') == -1) {\n        return true;\n      }\n    }\n  },\n\n  isIOSDevice: function() {\n    if (\n      // eslint-disable-next-line new-cap\n      MobileEsp.DetectIos() ||\n      this.isModernIos() ||\n      BOO_PRETEND_TO_BE_IOS ||\n      BOO_PRETEND_TO_BE_IPHONE ||\n      BOO_PRETEND_TO_BE_IPAD\n    ) {\n      return true;\n    }\n    return false;\n  },\n\n  isRunningFromFile: function() {\n    if (document.location.protocol == 'file:') {\n      return true;\n    }\n    return false;\n  },\n\n  isAndroidDevice: function() {\n    if (\n      // eslint-disable-next-line new-cap\n      MobileEsp.DetectAndroid() ||\n      BOO_PRETEND_TO_BE_ANDROID_PHONE ||\n      BOO_PRETEND_TO_BE_ANDROID_TABLET\n    ) {\n      return true;\n    }\n    return false;\n  },\n\n  isWindowsPhone: function() {\n    // eslint-disable-next-line new-cap\n    if (MobileEsp.DetectWindowsPhone()) {\n      return true;\n    }\n    return false;\n  },\n\n  isAndroid_4_1_to_4_3: function() {\n    if (/Android 4\\.[123]/.test(navigator.userAgent)) {\n      return true;\n    }\n    return false;\n  },\n\n  getBrowserName: function() {\n    var browserName = head.browser.name;\n\n    if (typeof browserName == 'undefined') {\n      if (OUTPUT_MODE_CHECKER.booIsIE()) {\n        browserName = 'Internet Explorer';\n      } else {\n        browserName = 'unknown';\n      }\n    }\n\n    return browserName;\n  },\n\n  getBrowserVersion: function() {\n    // For logging serverside (currently Kibana), this is expected to be a number\n    var browserVersion = head.browser.version;\n    if (isNaN(browserVersion)) {\n      browserVersion = BrowserDetect.version;\n      if (typeof browserVersion == 'undefined') {\n        // If it's not set, then initate the class\n        BrowserDetect.init();\n        browserVersion = BrowserDetect.version;\n      }\n      // If it's still unkown then set a number for Kibana to reference\n      if (browserVersion == 'an unknown version') {\n        browserVersion = 0;\n      }\n    }\n\n    return browserVersion;\n  },\n\n  getDeviceType: function() {\n    var deviceType = 'other';\n\n    if (OUTPUT_MODE_CHECKER.isDesktop()) {\n      deviceType = 'desktop';\n    }\n    if (OUTPUT_MODE_CHECKER.isSmartPhone()) {\n      deviceType = 'smartphone';\n    }\n    if (OUTPUT_MODE_CHECKER.isTablet()) {\n      deviceType = 'tablet';\n    }\n\n    return deviceType;\n  },\n\n  getClientOs: function() {\n    var osName = 'Unknown OS';\n\n    if (navigator.appVersion.indexOf('Win') != -1) osName = 'Windows';\n    if (navigator.appVersion.indexOf('Mac') != -1) osName = 'MacOS';\n    if (navigator.appVersion.indexOf('X11') != -1) osName = 'UNIX';\n    if (navigator.appVersion.indexOf('Linux') != -1) osName = 'Linux';\n\n    return osName;\n  },\n\n  hasDomRefreshError: function() {\n    // This function has a list of browsers/OS's that have issues with DOM's rendering when 'CSS transformed' into view.\n    if (this.strWhatAndroidVersion == '3.2') {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  canHandleAnimationType: function(strAnimationAsset) {\n    /* This function lets you switch on and off animations for different devices.\n     * Remeber that CSS will likely need to be updated if the an animation is changed\n     *\n     * List of animationAsset's added to their interface and css code at time of writing (04/01/13):\n     * screen | menu | glossary | help | subScreen | videoPopup\n     * List of animationAsset's required:\n     * audio | filmstrip | caseStudies | lastPageVisited | settings\n     */\n    if (this.strWhatAndroidVersion == '3.2') {\n      switch (strAnimationAsset) {\n        case 'screen':\n          return false;\n        default:\n          return true;\n      }\n    } else {\n      return true;\n    }\n  },\n\n  canHandleHardwareAnimation: function(strAnimationAsset) {\n    /* This function lets you switch on and off animations for different devices.\n     * Remeber that CSS will likely need to be updated if the an animation is changed\n     *\n     * List of animationAsset's added to their interface and css code at time of writing (04/01/13):\n     * subScreen | settings | glossary | help | screen | videoPopup\n     * List of animationAsset's required:\n     * audio | filmstrip | caseStudies | lastPageVisited | menu\n     */\n    if (this.strWhatAndroidVersion == '4.1') {\n      return true;\n    } else {\n      return true;\n    }\n  },\n\n  canHandleVideoBackground: function() {\n    var videoSupport = false;\n\n    if (Modernizr && Modernizr.video) {\n      videoSupport = true;\n    }\n\n    return videoSupport;\n  },\n\n  applyScrolling: function() {\n    if (this.isTablet() || this.isSmartPhone()) {\n      return true;\n    }\n    return false;\n  },\n\n  useTransformForScrollingWithVideoAssets: function() {\n    if (this.isIPad()) {\n      var _strIOSVersion = this._getIOSVersionString();\n      var _arrIOSVersionSplit = _strIOSVersion.split('_');\n\n      // Currently, only iPad 5.1.1 seems to be able to cope with the\n      // use of a transform on a video reliably.\n      if (_arrIOSVersionSplit[0] >= 5) {\n        if (_arrIOSVersionSplit[1] >= 1) {\n          return true;\n        }\n      }\n      return false;\n    }\n    return true;\n  },\n\n  booIE8CompatibilityMode: function() {\n    var isIE8 =\n      navigator.appVersion.indexOf('MSIE') != -1 &&\n      parseFloat(navigator.appVersion.split('MSIE')[1]) == 8;\n    var isIE7 =\n      navigator.appVersion.indexOf('MSIE') != -1 &&\n      parseFloat(navigator.appVersion.split('MSIE')[1]) == 7;\n    if ((isIE8 || isIE7) && navigator.appVersion.indexOf('Trident') != -1) {\n      // Liar, this is IE8 in compatibility mode.\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  booIsIE8: function() {\n    var isIE8 =\n      navigator.appVersion.indexOf('MSIE') != -1 &&\n      parseFloat(navigator.appVersion.split('MSIE')[1]) == 8;\n    if (isIE8) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  booIsIE: function() {\n    if (\n      navigator.appVersion.indexOf('MSIE') != -1 ||\n      navigator.userAgent.match(/Trident\\/7\\./)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  booIsMicrosoftEdge: function() {\n    if (navigator.appVersion.indexOf('Edge') != -1) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  booIsFirefox: function() {\n    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  booIsSafari: function() {\n    // This check excludes Chrome, Edge and all Android browsers that include the 'Safari' string\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  },\n\n  booRequireIscrollFix: function() {\n    /*\n     * TRUE-The fix is required. If it's NOT applied then the element double clicks. For example, the Audio files will play twice.\n     * FALSE-The fix is not required. If it IS applied then the element is not clickable at all. For example, the main menu doesn't click.\n     *\n     * So far the following devices with the following results, have been checked against this iScroll double click bug fix;\n     * TRUE\n     * - Samsung Nexus 7 (tablet) 4.2.2 - Samsung S3 (mobile) 4.1.2 - SAMSUNG NEXUS S (mobile) 4.0.2 -\n     * - SONY XPREIA (mobile) 4.1.2 - HTC Desire (mobile) 2.3.4 -\n     * FALSE\n     * - Asus Transform (tablet) 4.1.1 - Samsung Galaxy Tab 2 (Tablet) 4.1.1 -\n     */\n    var version = OUTPUT_MODE_CHECKER.strWhatAndroidVersionThreeDigit;\n    if (version == '4.1.1') {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  _checkOverrideBrowserClasses: function() {\n    // Smartphone overrides\n    if (BOO_PRETEND_TO_BE_BLACKBERRY_PHONE) {\n      this.strWhatOSClass = 'blackberryC';\n      this.strWhatBrowserTypeClass = 'safariC';\n      this.strWhatBrowserVersionClass = 'browserVersion_534.8_C';\n    } else if (BOO_PRETEND_TO_BE_ANDROID_PHONE) {\n      this.strWhatOSClass = 'androidC';\n      this.strWhatBrowserTypeClass = 'safariC'; // Android 2.x\n      this.strWhatBrowserVersionClass = 'browserVersion_533.1_C';\n    } else if (BOO_PRETEND_TO_BE_IPHONE) {\n      this.strWhatOSClass = 'iPhoneC';\n      this.strWhatBrowserTypeClass = 'safariC'; // Android 4.x\n      this.strWhatBrowserVersionClass = 'browserVersion_5.1_C';\n    }\n\n    // Tablet overrides\n    if (BOO_PRETEND_TO_BE_ANDROID_TABLET) {\n      this.strWhatOSClass = 'androidC';\n      this.strWhatBrowserTypeClass = 'safariC'; // Android 4.x\n      this.strWhatBrowserVersionClass = 'browserVersion_534.3_C';\n    } else if (BOO_PRETEND_TO_BE_IPAD) {\n      this.strWhatOSClass = 'iPadC';\n      this.strWhatBrowserTypeClass = 'safariC'; // Android 2.x\n      this.strWhatBrowserVersionClass = 'browserVersion_5.1_C';\n    }\n  },\n\n  /* REFACTOR NOTE : _checkForElementSizeUpdates() and _callbackScreensizeChanged() are potentially expensive functions.\n   *  We should look in to moving these to a screen basis rather than topic basis.\n   */\n  _checkForElementSizeUpdates: function() {\n    var strUpdateId;\n    var shownScreen = '.shownScreenC ';\n    if (BOO_DYNAMIC_CONTINUOUS_SCROLLING) {\n      shownScreen = '';\n    }\n    var idToken = '#';\n\n    for (strUpdateId in OUTPUT_MODE_CHECKER.objScreenSizeBoundaries) {\n      if (\n        Object.prototype.hasOwnProperty.call(\n          OUTPUT_MODE_CHECKER.objScreenSizeBoundaries,\n          strUpdateId\n        )\n      ) {\n        var strDomId = '';\n        var domElement = '';\n        if (OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[strUpdateId].strDomId) {\n          strDomId =\n            OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[strUpdateId].strDomId;\n          // Make sure the screen is rendered or the element will always return a width of 0px.\n          domElement = $(shownScreen + idToken + strDomId)[0];\n          if (typeof domElement == 'undefined' || domElement == null) {\n            continue;\n          }\n        } else {\n          domElement = window;\n        }\n\n        if (\n          jQuery(domElement).width() >=\n          OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[strUpdateId]\n            .intLargeScreenMin\n        ) {\n          OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[\n            strUpdateId\n          ].strCurrentLayoutSize = OUTPUT_MODE_CHECKER.strScreenSizeLarge;\n          // console.log('Output Large  --  strID = '+strUpdateId+'  -- Width = '+jQuery(domElement).width());\n        } else if (\n          jQuery(domElement).width() <=\n          OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[strUpdateId]\n            .intSmallScreenMax\n        ) {\n          OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[\n            strUpdateId\n          ].strCurrentLayoutSize = OUTPUT_MODE_CHECKER.strScreenSizeSmall;\n          // console.log('Output Small  --  strID = '+strUpdateId+'  -- Width = '+jQuery(domElement).width());\n        } else {\n          OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[\n            strUpdateId\n          ].strCurrentLayoutSize = OUTPUT_MODE_CHECKER.strScreenSizeMedium;\n          // console.log('Output Medium  --  strID = '+strUpdateId+'  -- Width = '+jQuery(domElement).width());\n        }\n\n        /* Some classes handle the strCurrentScreeSize and need their own version updated.\n         *  Only call this if the screen type changes.\n         */\n        if (\n          OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[strUpdateId]\n            .strPreviousLayoutSize !=\n          OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[strUpdateId]\n            .strCurrentLayoutSize\n        ) {\n          OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[\n            strUpdateId\n          ].strPreviousLayoutSize =\n            OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[\n              strUpdateId\n            ].strCurrentLayoutSize;\n          OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[strUpdateId].funCallBack({\n            objUpdateValue:\n              OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[strUpdateId],\n            objOptionalFunParameter:\n              OUTPUT_MODE_CHECKER.objScreenSizeBoundaries[strUpdateId]\n                .objOptionalFunParameter\n          });\n        }\n      }\n    }\n  },\n\n  _callbackScreensizeChanged: function() {\n    var count = 0;\n    while (count < this.arrScreensizeChangedCallbacks.length) {\n      // Execute each callback\n      this.arrScreensizeChangedCallbacks[count]();\n      count++;\n    }\n  },\n\n  _applyBrowserVersionClasses: function() {\n    this._checkOverrideBrowserClasses();\n    this._getAndroidVersion();\n    this._getAndroidVersionThreeDigit();\n\n    var _domOSTag = this._objCurrDOM.getElementById(this._strOSTagID);\n    var _domOSVersionTag = this._objCurrDOM.getElementById(\n      this._strOSVersionTagID\n    );\n    var _domBrowserTypeTag = this._objCurrDOM.getElementById(\n      this._strBrowserTypeTagID\n    );\n    var _domBrowserVersionTag = this._objCurrDOM.getElementById(\n      this._strBrowserVersionTagID\n    );\n    var _strOSVersion = '';\n\n    if (_domOSTag && _domBrowserTypeTag && _domBrowserVersionTag) {\n      _domOSTag.className = this.strWhatOSClass;\n\n      if (_domOSTag.className == 'iPadC') {\n        _strOSVersion = this._getIOSVersionString();\n      }\n      if (this.isAndroidDevice()) {\n        _strOSVersion = this.strWhatAndroidVersion.replace('.', '_');\n      }\n\n      if (_strOSVersion) {\n        _domOSVersionTag.className = 'osVersion_' + _strOSVersion + '_C';\n      }\n\n      _domBrowserTypeTag.className = this.strWhatBrowserTypeClass;\n      _domBrowserVersionTag.className = this.strWhatBrowserVersionClass;\n      // alert('Current HTML=' + document.documentElement.innerHTML)\n    } else {\n      // alert(\"ERROR: Unable to locate all the required tags for browser detect class setting. OUTPUT_MODE_CHECKER._applyBrowserVersionClasses(), output_mode_checker.js\");\n      LOCALISER.l_alert('OUTPUT_MODE_CHECKER_MISSING_OUTPUT_MODE_TAGS_ERROR');\n    }\n  },\n\n  _applyAppFilePrefix: function() {\n    var _strDocumentLocation = '';\n    if (BOO_APP_VERSION) {\n      if (this.isIOSDevice()) {\n        _strDocumentLocation = document.location.pathname;\n      } else {\n        _strDocumentLocation = document.location.href;\n      }\n      var _strFilename = _strDocumentLocation.substring(\n        _strDocumentLocation.lastIndexOf('/') + 1\n      );\n      var _strFileLocation = _strDocumentLocation.replace(_strFilename, '');\n\n      this.strAppFilePrefix = _strFileLocation;\n    }\n  },\n\n  _applyModeClass: function() {\n    var _domOutputModeTag = this._objCurrDOM.getElementById(\n      this._strOutputModeTagID\n    );\n    _domOutputModeTag.className = this.strCurrentMode;\n\n    var classUpdates = '';\n    if (BOO_BROWSER_EDGE_SCROLLER) {\n      classUpdates = ' browserEdgeScroller';\n    }\n    if (\n      typeof CUSTOM_SCROLLER_STYLE == 'undefined' ||\n      CUSTOM_SCROLLER_STYLE == true\n    ) {\n      classUpdates += ' customScrollerStyle';\n    }\n\n    document.body.className = this.strCurrentMode + classUpdates;\n  },\n\n  _applyIScrollModeClass: function() {\n    $('html').toggleClass(this._strNoIScroll, this.isDesktop());\n  },\n\n  _getIOSVersionString: function() {\n    if (!BOO_PRETEND_TO_BE_IPAD) {\n      var _strBaseUserAgent = navigator.userAgent;\n      var _strFirstSplit = _strBaseUserAgent.split('CPU OS ')[1];\n      var _strOSVersionSplit = _strFirstSplit.split(' like')[0];\n      // alert(_strOSVersionSplit)\n      return _strOSVersionSplit;\n    } else {\n      return '5';\n    }\n  },\n\n  _getAndroidVersion: function() {\n    var _strUserAgent = navigator.userAgent;\n    if (_strUserAgent.indexOf('Android') >= 0) {\n      this.strWhatAndroidVersion = parseFloat(\n        _strUserAgent.slice(_strUserAgent.indexOf('Android') + 8)\n      );\n      this.strWhatAndroidVersion = this.strWhatAndroidVersion + '';\n      return this.strWhatAndroidVersion;\n    } else {\n      this.strWhatAndroidVersion = '';\n      return this.strWhatAndroidVersion;\n    }\n  },\n\n  _getAndroidVersionThreeDigit: function() {\n    var _strUserAgent = navigator.userAgent;\n    if (_strUserAgent.indexOf('Android') >= 0) {\n      this.strWhatAndroidVersionThreeDigit = _strUserAgent.slice(\n        _strUserAgent.indexOf('Android') + 8,\n        _strUserAgent.indexOf('Android') + 13\n      );\n      this.strWhatAndroidVersionThreeDigit =\n        this.strWhatAndroidVersionThreeDigit + '';\n      return this.strWhatAndroidVersionThreeDigit;\n    } else {\n      this.strWhatAndroidVersionThreeDigit = '';\n      return this.strWhatAndroidVersionThreeDigit;\n    }\n  },\n\n  _setIE8IsALiar: function() {\n    var booIE8CompatibilityMode = this.booIE8CompatibilityMode();\n\n    var _objBrowserClasses = {\n      strBrowserTypeClass: 'ie7C',\n      strBrowserVersionClass: 'browserVersion_7_C'\n    };\n\n    if (booIE8CompatibilityMode) {\n      _objBrowserClasses = {\n        strBrowserTypeClass: 'ie8CompatibilityModeC',\n        strBrowserVersionClass: 'browserVersion_8_C'\n      };\n    }\n    return _objBrowserClasses;\n  },\n\n  debug: function(strMessage, intPriority, objCallerObject, booCalleeChain) {\n    if (DEBUG) {\n      DEBUG.lert(strMessage, intPriority, objCallerObject, booCalleeChain);\n    }\n  }\n};\n\nif (window['EM']) {\n  EM.register(OUTPUT_MODE_CHECKER);\n}\n"},function(e,n,t){t(0)(t(20))},function(e,n){e.exports='/**\n* @title Generic Object Methods\n* @description Contains generic helper functions.\n*\n*\n* @author Johnc\n* @version 2.0 10/02/06\n*/\n\n//to remove the blackboardLMS topframe\nfunction removeTopFrame()\n{\n\tif (parent !== self)\n\t{\n\t\tif (parent.document.getElementById(\'LMSFrame\') && parent.document.getElementById(\'code\') && parent.document.getElementById(\'menu\'))\n\t\t{\n\t\t\tparent.document.getElementsByTagName(\'frameset\')[0].rows = "0,*";\n\t\t}\n\t}\n}\n\n\n/**\n* Diagnostic function that alerts all properties of the object its attached too.\n* Functions and Object\'s are not fully listed, but instead have " = A Function"\n* of " = An Object" added.\n*/\nfunction alertAll()\n{\n\t//alert()\n\n\t//var names = "Object properties:\\n"\n\tvar names = LOCALISER.get("GENERIC_METHODS_OBJECT_PROPERTIES_TITLE");\n\n\tvar functionsArray = new Array();\n\tvar objectsArray = new Array();\n\tvar variablesArray = new Array();\n\n\tfor (var propCount in this)\n\t{\n\t\t//alert(typeof propCount)\n\t\t//if ((propCount != "setTheState") && (propCount != "alertAll") && (propCount != "refreshState") && (propCount != "makeTestMeTrackArray") && (propCount != "makeAssesTrackArray"))\n\t\tevalProp = eval("this." + propCount)\n\t\tpropType = typeof evalProp\n\t\t//alert(propType)\n\t\tswitch (propType)\n\t\t{\n\t\t\tcase "function":\n\t\t\t\t//functionsArray[functionsArray.length] =  propCount + " = A Function\\n"\n\t\t\t\tfunctionsArray[functionsArray.length] =  propCount + " = " + LOCALISER.get("GENERIC_METHODS_FUNCTION_TYPE_TEXT") + "\\n";\n\t\t\tbreak;\n\t\t\tcase "object":\n\t\t\t\t//objectsArray[objectsArray.length] =  propCount + " = An Object\\n"\n\t\t\t\tobjectsArray[objectsArray.length] =  propCount + " = " + LOCALISER.get("GENERIC_METHODS_OBJECT_TYPE_TEXT") + "\\n";\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvariablesArray[variablesArray.length] =  propCount + " = " + evalProp + "\\n"\n\t\t\tbreak;\n\t\t}\n\t}\n\n\n\t//names += "\\nFUNCTIONS\\n\\n"\n\tnames += "\\n" + LOCALISER.get("GENERIC_METHODS_FUNCTIONS_TITLE") + "\\n\\n";\n\tvar count = 0;\n\tfunctionsArray.sort()\n\twhile (count < functionsArray.length)\n\t{\n\t\tnames += functionsArray[count]\n\t\tcount++\n\t}\n\n\t//names += "\\nOBJECTS\\n\\n"\n\tnames += "\\n" + LOCALISER.get("GENERIC_METHODS_OBJECTS_TITLE") + "\\n\\n";\n\tvar count = 0;\n\tobjectsArray.sort()\n\twhile (count < objectsArray.length)\n\t{\n\t\tnames += objectsArray[count]\n\t\tcount++\n\t}\n\n\t//names += "\\nVARIABLES\\n\\n"\n\tnames += "\\n" + LOCALISER.get("GENERIC_METHODS_VARIABLES_TITLE") + "\\n\\n";\n\tvar count = 0;\n\tvariablesArray.sort()\n\twhile (count < variablesArray.length)\n\t{\n\t\tnames += variablesArray[count]\n\t\tcount++\n\t}\n\talert(names)\n}\n\n\n/**\n* Used for general randomisation goodness. E.g. assessment navigation, question option order etc.\n* @param a - The first value\n* @param b - The second value\n* @usage arrSomeArray.sort(randomSort)\n*/\n\nfunction randomSort(a, b)\n{\n\treturn Math.random() - 0.5;\n}\n\n\n\n/**\n* Removes the element at the specified index and returns the pruned array.\n* @param whatArray - The array to remove an element from\n* @param whatIndex - The index of the element, can be either a string or an integer.\n* @return The array without the specified element.\n*/\nfunction removeArrayElement(whatArray, whatIndex)\n{\n\t//this.debug("removeArrayElement(whatArray: " + whatArray.join(",") + ", whatIndex: " + whatIndex + ")", 1, this, true)\n\tvar returnArray = new Array()\n\t// REFACTOR FOR LOOP FOR IE8\n\tvar count = 0;\n\twhile (count < whatArray.length)\n\t{\n\t\tif (count != whatIndex)\n\t\t{\n\t\t\treturnArray[returnArray.length] = whatArray[currIndex];\n\t\t}\n\t\tcount++;\n\t}\n\treturn returnArray;\n}\n\n\n\n/**\n* Removes the element at the specified index and returns the pruned array.\n* @param whatArray - The array to remove an element from\n* @param whatIndex - The index of the element, can be either a string or an integer.\n* @return The array without the specified element.\n*/\nfunction removeNamedArrayElement(_objWhatArray, _strWhatIndex)\n{\n\t//this.debug("removeArrayElement(whatArray: " + whatArray.join(",") + ", whatIndex: " + whatIndex + ")", 1, this, true)\n\tvar returnArray = new Array();\n\tfor (var _strCurrIndex in _objWhatArray)\n\t{\n\t\tif (_strCurrIndex != _strWhatIndex)\n\t\t{\n\t\t\treturnArray[_strCurrIndex] = _objWhatArray[_strCurrIndex];\n\t\t}\n\t}\n\treturn returnArray;\n}\n\n/**\n* Joins one array to another regardless of their type (indexed or associative)\n* @param array1 - The first array\n* @param array2 - The second array\n* @return An new array created from the arrays passed in.\n*/\nfunction joinArrays(array1, array2)\n{\n\tvar returnArray = new Array()\n\n\tfor (var currIndex in array1)\n\t\treturnArray[returnArray.length] = array1[currIndex]\n\n\tfor (var currIndex in array2)\n\t\treturnArray[returnArray.length] = array2[currIndex]\n\n\treturn returnArray;\n}\n\n\n/**\n* Produces a random number within the given range.\n* @param minNum - An integer for the lowest value, note this can be negative.\n* @param maxNum - An integer for the highest value, note this can be negative.\n* @return A random (ish) integer inbetweem the two above values.\n*/\nfunction getRandom(minNum, maxNum)\n{\n\treturn minNum + Math.round((Math.random() * maxNum))\n}\n\n\n/**\n* Acts as an interface to the DEBUG object\n* @param msg - A string that will form the body of the message\n* @param priority - An integer to specify the importance and colour of the message\n* @param whatObj - An optional parameter which will have its properties and methods listed.\n* @param showCallee - An optional parameter which causes the callee chain for the function\n\t\t\t\t\t\t\t\t\t\t\tthe debug call orginated in to be listed. Sadly this won\'t work across\n\t\t\t\t\t\t\t\t\t\t\tframes in IE. It also won\'t work properly if there is any recursion in\n\t\t\t\t\t\t\t\t\t\t\tthe chain.\n* @usage NOTE: This can run into recursive problems listing objects, therefore both "_objParent"\n\t\t\t\t\t\t\t and "parentObj" will not be listed. Also, some native objects such as document should\n\t\t\t\t\t\t\t be avoided as IE can get upset if certain bits of them are looked at!\n*/\nfunction debugMsg(msg, priority, whatObj, showCallee)\n{\n\tif ((BOO_SHOW_DEBUG) && (DEBUG))\n\t\tDEBUG.lert(msg, priority, whatObj, showCallee)\n}\n\n\n/**\n* Takes a string and splits it based on capital letters\n* @param whatText - A string along the lines of thisIsAStringThatHasBeenCamelCased\n* @return The un-camel cased string\n*/\nfunction unCamelCase(whatText)\n{\n\tvar lowerCaseString = whatText.toLowerCase()\n\tvar expandedWordsArray = new Array()\n\tvar expandedWordEnd = 0;\n\tvar count = 0;\n\t// Extract the words into an array.\n\twhile (count < whatText.length)\n\t{\n\t\t//this.debug("whatText.charAt(count): " + whatText.charAt(count) + ", lowerCaseString.charAt(count): " + lowerCaseString.charAt(count),3)\n\t\tif (whatText.charAt(count) != lowerCaseString.charAt(count))\n\t\t{\n\t\t\t//this.debug("SLICING: " + whatText.slice(expandedWordEnd, count),3)\n\t\t\texpandedWordsArray[expandedWordsArray.length] = whatText.slice(expandedWordEnd, count)\n\t\t\texpandedWordEnd = count;\n\t\t}\n\t\tcount++;\n\t}\n\t// Add any remaining text as the last word never finds a difference to slice.\n\texpandedWordsArray[expandedWordsArray.length] = whatText.slice(expandedWordEnd, count)\n\n\tcount = 0;\n\twhile (count < expandedWordsArray.length)\n\t{\n\t\tif (count == 0)\n\t\t\texpandedWordsArray[count] = expandedWordsArray[count].charAt(0).toUpperCase() + expandedWordsArray[count].slice(1,expandedWordsArray[count].length)\n\t\telse\n\t\t\texpandedWordsArray[count] = expandedWordsArray[count].charAt(0).toLowerCase() + expandedWordsArray[count].slice(1,expandedWordsArray[count].length)\n\t\tcount++\n\t}\n\n\tvar deCameledString = expandedWordsArray.join(" ");\n\treturn deCameledString;\n}\n\n\n/**\n* Takes a string and and removes any leading or trailing spaces.\n* @param _strWhatText\n* @return The adjusted string\n*/\nfunction trim(_strWhatText)\n{\n\twhile (_strWhatText.charAt(0) == " ")\n\t{\n\t\t_strWhatText = _strWhatText.slice(1,_strWhatText.length)\n\t}\n\n\twhile (_strWhatText.charAt(_strWhatText.length - 1) == " ")\n\t{\n\t\t_strWhatText = _strWhatText.slice(0,(_strWhatText.length - 1))\n\t}\n\n\treturn _strWhatText;\n}\n\n/**\n* Removes any opening and closing <p> tags.\n* @param _htmWhatText\n* @return The adjusted string\n*/\nfunction _stripParaTags(_htmWhatText)\n{\n\treturn _htmWhatText.replace("<p>","").replace("<P>","").replace("</p>","").replace("</P>","");\n}\n\n/**\n* Swaps certain escaped characters for thier real alternates.\n* @param _strWhatText\n* @return The adjusted string\n*/\nfunction parseForAltText(_strWhatText)\n{\n\t_strWhatText = _strWhatText.replace("&#146;", "\\\'");\n\treturn _strWhatText\n}\n\n\n/**\n* Returns an integer after using a regExp to strip all the non-numeric\n* chars from the string.\n* @param _strWhatString\n* @return The adjusted string\n*/\nfunction stripAlphaChars(_strWhatString)\n{\n\tvar regExp = /\\D/gi\n\treturn _strWhatString.replace(regExp, "");\n}'},function(e,n,t){t(0)(t(22))},function(e,n){e.exports="/**\n * Custom close sequences...\n * the default is to stop tracking and close the window.\n *\n * If the method returns false the default close routines will continue to run\n * however returning true prevents the default methods running.\n * \n */\n\nvar CLOSE_METHODS = {\n\t\t\n\t/**\n\t * IQ player close method!\n\t */\n\tiq: function() {\n\t\t// Re-direct to close window!\n\t\twindow.location = 'Close.htm';\n\t\treturn true;\n\t},\n\n\t/**\n\t * JLR excellence close method!\n\t */\n\texcellence: function() {\n\t\tif(typeof window.parent !== 'undefined' &&\n\t\t\ttypeof window.parent.Control !== 'undefined' &&\n\t\t\ttypeof window.parent.Control.ReturnToLms !== 'undefined') {\n\t\t\t\twindow.parent.Control.ReturnToLms();\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\n}"},function(e,n,t){t(0)(t(24))},function(e,n){e.exports='requireMap = {\n\t"backbone":"frameworks/backbone/backbone",\n\t"handlebars":"frameworks/handlebars/handlebars",\n\t"mustache" : "frameworks/player/mustache/mustache",\n\t"knockout" : "frameworks/knockout/knockout",\n\t"komappings" : "frameworks/knockout/knockout.mapping",\n\t"stacktrace" : "frameworks/stacktrace/stacktrace",\n\t"svg4everyone" : "frameworks/svg/svg4everybody.legacy",\n\t"videoJs" : "frameworks/player/video-js-2/video"\n};'},function(e,n,t){t(0)(t(26))},function(e,n){e.exports='/**\n* @title Object extender\n* @description An object literal to extend one object with another. It will check\n* for existing methods / properties and respond by issuing warnings\n* or, in the case of arrays, appending one array to the other.\n*\n*\n* @author Johnathan Castle\n* @version 2.0 23/09/10\n*/\n\nvar O_EXTENDER =\n{\n\tstrObjID : "The object extender",\n\t_arrExcludedProperies : ["strObjID","strDescription", "booTerminal"],\n\n\t// This variable is checked by CORE.init() before proceding\n\tbooObjectMergeError : false,\n\n\textend : function (_objBase, _objExtension)\n\t{\n\t\tvar _strMergeErrors = "";\n\t\tif (!this.booObjectMergeError)\n\t\t{\n\t\t\tfor (var _strCurrPropName in _objExtension)\n\t\t\t{\n\t\t\t\tvar _objCurrProp = _objExtension[_strCurrPropName];\n\t\t\t\tvar _strPropType = this._getPropType(_objCurrProp, _strCurrPropName);\n\t\t\t\tif ((!_objBase[_strCurrPropName]) && (_objBase[_strCurrPropName] !== false) && (_objBase[_strCurrPropName] !== null))\n\t\t\t\t{\n\t\t\t\t\t// If an object has already caused a conflict, don\'t attempt\n\t\t\t\t\t// any more merging.\n\t\t\t\t\tif ((!this.booObjectMergeError) && (!this._isExcludedProperty(_strCurrPropName)))\n\t\t\t\t\t{\n\t\t\t\t\t\t_objBase[_strCurrPropName] = _objCurrProp;\n\t\t\t\t\t\tif (_strPropType == "function")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//_objExtension[_strCurrPropName] = function(){alert(\'ERROR: An attempt to call a method directly on an extension was detected. Please call object you are extending rather than the extension.\')};\n\t\t\t\t\t\t\t_objExtension[_strCurrPropName] = function(){LOCALISER.l_alert("EXTENDER_DIRECT_METHOD_CALL_ERROR")};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (_strPropType == "array")\n\t\t\t\t\t{\n\t\t\t\t\t\t// If an object has already caused a conflict, don\'t attempt\n\t\t\t\t\t\t// any more merging.\n\t\t\t\t\t\tif ((!this.booObjectMergeError) && (!this._isExcludedProperty(_strCurrPropName)))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis._appendArray(_objBase, _objExtension, _strCurrPropName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!this._isExcludedProperty(_strCurrPropName))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.booObjectMergeError = true;\n\t\t\t\t\t\t\t_strMergeErrors += _strCurrPropName + "\\n";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.booObjectMergeError)\n\t\t{\n\t\t\t// Turn the debugger on if required.\n\t\t\tif (DEBUG.debugPriorityThreshold > 0)\n\t\t\t{\n\t\t\t\tDEBUG.debugPriorityThreshold = 0;\n\t\t\t}\n\t\t\t//DEBUG.lert("CRITICAL ERROR: O_EXTENDER.extend() was asked to merge:\\n\\n\'" + _objBase.strObjID + "\'\\n\\nWith:\\n\\n\'" + _objExtension.strObjID + "\'\\n\\nFound that the base object already had the following properties:\\n\\n" + _strMergeErrors + "\\nMerging process has been TERMINATED.\\n\\nExecution of CORE.init() has been ABORTED.\\n\\nFurther extensions will NOT be attempted.\\n\\nPlease resolve property naming issue and reload this page.",3);\n\t\t\tvar _strErrorMessage = LOCALISER.get("EXTENDER_CRITICAL_MERGE_ERROR", [_objBase.strObjID, _objExtension.strObjID, _strMergeErrors])\n\t\t\tDEBUG.lert(_strErrorMessage ,3);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//Let the Event Manager know about the extending  objects\n\t\t\tEM.updateExtendedObject(_objBase, _objExtension);\n\t\t}\n\t\t//alert("this.booObjectMergeError: " + \tthis.booObjectMergeError);\n\t},\n\n\t_appendArray : function (_objBase, _objExtension, _strCurrPropName)\n\t{\n\t\tvar count = 0;\n\t\twhile (count < _objExtension[_strCurrPropName].length)\n\t\t{\n\t\t\t_objBase[_strCurrPropName][_objBase[_strCurrPropName].length] = _objExtension[_strCurrPropName][count];\n\t\t\tcount++;\n\t\t}\n\t},\n\n\t_getPropType : function (_objWhatProperty, _strPropertyName)\n\t{\n\t\tvar _strTypeOf = typeof _objWhatProperty\n\t\tif (_strTypeOf == "object")\n\t\t{\n\t\t\tif (_objWhatProperty instanceof Array)\n\t\t\t{\n\t\t\t\treturn "array";\n\t\t\t}\n\t\t\tif (_objWhatProperty instanceof Object)\n\t\t\t{\n\t\t\t\treturn "object";\n\t\t\t}\n\t\t\tif (_objWhatProperty instanceof String)\n\t\t\t{\n\t\t\t\treturn "string";\n\t\t\t}\n\t\t\tif (_objWhatProperty instanceof Number)\n\t\t\t{\n\t\t\t\treturn "number";\n\t\t\t}\n\t\t\t// null values are an object that isn\'t an object. Which is nice.\n\t\t\tif (_objWhatProperty == null)\n\t\t\t{\n\t\t\t\treturn "null";\n\t\t\t}\n\t\t\t//alert("Unknown object with the property name of " + _strPropertyName + " passed to O_EXTENDER._getPropType(), extender.js.");\n\t\t\tLOCALISER.l_alert("EXTENDER_UNKNOWN_PROP_TYPE_ERROR", [_strPropertyName])\n\t\t}\n\t\treturn _strTypeOf;\n\t},\n\n\t// Checks the property isn\'t on the excluded list as some property such as strObjID\n\t// should never be merged.\n\t_isExcludedProperty : function (_strCurrPropName)\n\t{\n\t\tvar count = 0;\n\t\twhile (count < this._arrExcludedProperies.length)\n\t\t{\n\t\t\t//alert("_strCurrPropName: " + _strCurrPropName + "\\nthis._arrExcludedProperies[count]: " + this._arrExcludedProperies[count])\n\t\t\tif (_strCurrPropName == this._arrExcludedProperies[count])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn false;\n\t}\n}\n//AUTO_DOC.register(O_EXTENDER, O_EXTENDER.strObjID);'},function(e,n,t){t(0)(t(28))},function(e,n){e.exports="/* global EM, OBJ_REF, $, DEBUG, BOO_DYNAMIC_CONTINUOUS_SCROLLING, SCREEN_INTERACTIONS,\nASSET_INTERACTIONS */\n/**\n * @title Actions Interactions\n * @description To be described.\n *\n *\n * @author GoMo\n * @version 2.0 08/01/14\n */\n\nvar ACTIONS_INTERACTIONS = {\n  strObjID: 'Actions interactions',\n  strObjDescription: 'Handles the common Action interactions, such as the showing of sub screens.',\n\n  booPerformNextActionOnConfirmedCompletion: true,\n  booWaitingForActionCallBack: false,\n\n  _objWhatDOM: null,\n  _arrActionsQueue: [],\n  _booActiveQueue: false,\n  _intActionId: 0,\n  _hashActionList: {},\n  _deferedTaskList: {},\n  _previousTimeStamp: Date.now(),\n  _maxActionRepeatFrequency: 250,\n\n  whitelistActions: ['createSubScreenFromText'],\n\n  handleEvent_primeDOMReferences: function(_objWhatDOM) {\n    this._objWhatDOM = _objWhatDOM;\n  },\n\n  handleEvent_setAction: function(_objActionOptions) {},\n\n  handleEvent_assetCreated: function(_objEventData) {\n    var _objAssetData = _objEventData.objAssetData;\n    var _arrPreProcessActions = [];\n    this._extractPreProcessActionsFromAssetObject(\n      _objAssetData.objRawData, _objAssetData, _arrPreProcessActions\n    );\n    var count = 0;\n    // Run the pre-process actions.\n    while (count < _arrPreProcessActions.length) {\n      var _objCurrPreProccessActionData = _arrPreProcessActions[count];\n      var _objActionOptions = {};\n\n      _objActionOptions.objActions = [_objCurrPreProccessActionData.objWhatActionData];\n      _objActionOptions.objOptionalExtraData = _objCurrPreProccessActionData;\n      EM.trigger('processActions', _objActionOptions);\n      count++;\n    }\n\n    //\n  },\n\n  handleEvent_processInlineActionSet: function(_objEventData) {\n    var _strAssetID = _objEventData.strAssetID;\n    var _strActionSetID = _objEventData.strActionSetID;\n    var _domLinkReference = _objEventData.domLink;\n\n    var _objAssetData = OBJ_REF.get(_strAssetID);\n    var _arrActionSetData = _objAssetData.getActionSet(_strActionSetID);\n\n    var _objActionOptions = {};\n    _objActionOptions.objActions = _arrActionSetData;\n    _objActionOptions.objOptionalExtraData = _objAssetData;\n    _objActionOptions.objOptionalExtraData.strAssetID = _strAssetID;\n    _objActionOptions.objOptionalExtraData.strActionSetID = _strActionSetID;\n    _objActionOptions.objOptionalExtraData.domLink = _domLinkReference;\n\n    EM.trigger('screenAssetInteracting', _objAssetData);\n\n    EM.trigger('processActions', _objActionOptions);\n  },\n\n  handleEvent_processActions: function(_objOptions) {\n    var _objOptionalExtraData = null;\n    if (_objOptions.objOptionalExtraData) {\n      _objOptionalExtraData = _objOptions.objOptionalExtraData;\n    }\n\n    this._showScreenForAction(_objOptionalExtraData, _objOptions)\n      .then(function(_objOptions) {\n        var _objActions = _objOptions.objActions;\n        var _objOptionalExtraData = {};\n        if (_objOptions.objOptionalExtraData) {\n          _objOptionalExtraData = _objOptions.objOptionalExtraData;\n        } else {\n          _objOptionalExtraData = null;\n        }\n        if (typeof _objActions != 'object') {\n          ACTIONS_INTERACTIONS.debug('_objActions undefined in ' +\n          'ACTIONS_INTERACTIONS.handleEvent_processActions()', 3);\n          return;\n        }\n\n        var count = 0;\n        while (count < _objActions.length) {\n          var _objAction = _objActions[count];\n          var _objActionOptionalExtraData = $.extend(true, {}, _objOptionalExtraData);\n\n          if (ACTIONS_INTERACTIONS['_process_' + _objAction.strActionGroup]) {\n            _objActionOptionalExtraData.intActionId = ACTIONS_INTERACTIONS._intActionId;\n            ACTIONS_INTERACTIONS._hashActionList[ACTIONS_INTERACTIONS._intActionId] = {\n              booCompletedAction: false\n            };\n            ACTIONS_INTERACTIONS._intActionId++;\n\n            ACTIONS_INTERACTIONS._arrActionsQueue.push(\n              ACTIONS_INTERACTIONS['_process_' +\n              _objAction.strActionGroup](_objAction, _objActionOptionalExtraData)\n            );\n          } else {\n            ACTIONS_INTERACTIONS.debug(\n              'The process \"' +\n                '_process_' +\n                _objAction.strActionGroup +\n                '\", being triggered doesnt exisit in ' +\n                'ACTIONS_INTERACTIONS.handleEvent_processActions()',\n              3\n            );\n          }\n          count++;\n        }\n        if (ACTIONS_INTERACTIONS._booActiveQueue == false\n          || ACTIONS_INTERACTIONS.booPerformNextActionOnConfirmedCompletion == false) {\n          ACTIONS_INTERACTIONS._flushQueue();\n        }\n        /*\n        * The queue has been flushed above, but as it has a 0 timeout within it, so it\n        * might not have completed by this point. We need to start an interval to check it's status\n        */\n        var deferedTaskInterval = setInterval(function() {\n          /* Run defered tasks once as we may have repeated tasks on multiple actions which only\n          * need to happen once.\n          */\n          if (ACTIONS_INTERACTIONS._booActiveQueue == false) {\n            ACTIONS_INTERACTIONS._runDeferedTasks();\n            clearInterval(deferedTaskInterval);\n          }\n        }, 50);\n      });\n  },\n\n  /*\n  * Check for duplicate actions within a given timeframe\n  */\n  checkForDuplicates: function(currentActionString, currentActionTimeStamp) {\n    var duplicateActionResponse = false;\n    var hashListIndex = this._intActionId-1;\n\n    while (typeof this._hashActionList[hashListIndex] !== 'undefined') {\n      var actionToCheck = this._hashActionList[hashListIndex];\n\n      if (currentActionTimeStamp - actionToCheck.creationTimeStamp\n        < this._maxActionRepeatFrequency) {\n        if (actionToCheck.actionString === currentActionString) {\n          duplicateActionResponse = true;\n          break;\n        }\n      } else {\n        // If we're looking at older actions then break\n        break;\n      }\n      hashListIndex--;\n    }\n\n    return duplicateActionResponse;\n  },\n\n  resetAllActions: function() {\n    this._arrActionsQueue = [];\n    this._booActiveQueue = false;\n  },\n\n  actionCompletedCallBack: function(_objOptionalExtraData) {\n    if (\n      this._hashActionList[_objOptionalExtraData.intActionId] &&\n      this._hashActionList[_objOptionalExtraData.intActionId].booCompletedAction == false\n    ) {\n      this._hashActionList[_objOptionalExtraData.intActionId].booCompletedAction = true;\n      if (_objOptionalExtraData.funTriggerCallBack) {\n        // Run an optional callback for the trigger item\n        _objOptionalExtraData.funTriggerCallBack();\n      }\n      ACTIONS_INTERACTIONS.booWaitingForActionCallBack = false;\n      // Allow the previous action to process before continuing.\n      setTimeout(function() {\n        ACTIONS_INTERACTIONS._flushQueue();\n      }, 0);\n    } else if (\n      this._hashActionList[_objOptionalExtraData.intActionId] &&\n      this._hashActionList[_objOptionalExtraData.intActionId].booCompletedAction == true\n    ) {\n      this.debug(\n        'The action ID ' +\n          _objOptionalExtraData.intActionId +\n          ' has already been completed in ACTIONS_INTERACTIONS.actionCompletedCallBack()',\n        2\n      );\n    } else {\n      this.debug(\n        'The action ID wasn\\'t passed back to ACTIONS_INTERACTIONS.actionCompletedCallBack()', 2\n      );\n    }\n  },\n\n  returnFocusToActionSet: function(parentId, actionId) {\n    var linkId = parentId + '_' + actionId;\n    var domActionLink = $('[data-linkid=\\'' + linkId + '\\']');\n    if (domActionLink.length && domActionLink.focus) {\n      domActionLink.focus();\n    }\n  },\n\n  /* If we're in continuous scrolling mode and have a reference asset ID\n  * we need to make sure that the screen is \"shown\" (active)\n  */\n  _showScreenForAction: function(_objOptionalExtraData, actionOpts) {\n    var deferred = new $.Deferred();\n    var assetParent = this._getAssetParent(_objOptionalExtraData);\n    var currentScreenData = SCREEN_INTERACTIONS.getCurrentScreenData();\n    if (\n      typeof(BOO_DYNAMIC_CONTINUOUS_SCROLLING) !== 'undefined'\n      && BOO_DYNAMIC_CONTINUOUS_SCROLLING\n      && _objOptionalExtraData\n      && (_objOptionalExtraData.strAssetID || _objOptionalExtraData.strObjID)\n      && assetParent\n      && currentScreenData\n      && assetParent.strObjType == 'screen'\n      && !_objOptionalExtraData.disableScrollTo\n    ) {\n      ASSET_INTERACTIONS._scrollIntoView_Asset(null,\n        null,\n        _objOptionalExtraData.strAssetID || _objOptionalExtraData.strObjID,\n        false,\n        actionOpts)\n        .then(function(actionOpts) {\n          return deferred.resolve(actionOpts);\n        });\n    } else {\n      deferred.resolve(actionOpts);\n    }\n    return deferred.promise();\n  },\n\n  /**\n   * Return the parent of the asset\n   * @param {object} actionData\n   * @return {object} assetParent\n   */\n  _getAssetParent: function(actionData) {\n    var assetParent = false;\n    if (!actionData) {\n      return assetParent;\n    }\n    var assetId = actionData.strAssetID || actionData.strID;\n    if (actionData && actionData.objParent) {\n      assetParent = actionData.objParent;\n    } else if (actionData && !actionData.objParent && actionData.strType && assetId) {\n      var assetData = false;\n      if (gomo.assetManager.isRegistered(actionData.strType)) {\n        assetData = gomo.assetManager.findInstance(assetId);\n      } else {\n        assetData = ASSET_INTERACTIONS.getAssetData(assetId);\n      }\n      if (assetData && assetData.objParent) {\n        assetParent = assetData.objParent;\n      }\n    }\n    return assetParent;\n  },\n  _extractPreProcessActionsFromAssetObject: function(\n    _objWhatRawAssetDataFragment,\n    _objWhatAssetDataHolder,\n    _arrPreProcessActions,\n    recursiveCount\n  ) {\n    var _booCurrItemIsAction = false;\n    var maxAttemptsToFindAction = 1000;\n    var localRecursiveCount = recursiveCount || 0;\n    for (var _strCurrKey in _objWhatRawAssetDataFragment) {\n      if (Object.prototype.hasOwnProperty.call(_objWhatRawAssetDataFragment, _strCurrKey)) {\n        localRecursiveCount++;\n        if (localRecursiveCount > maxAttemptsToFindAction) {\n          console.log(\n            'ACTIONS_INTERACTIONS._extractPreProcessActionsFromAssetObject()' +\n            ' has exceeded it\\'s max attempts to find an action'\n          );\n          break;\n        }\n        var _objCurrDataPoint = _objWhatRawAssetDataFragment[_strCurrKey];\n        _booCurrItemIsAction = false;\n        if (\n          _objCurrDataPoint &&\n          _objCurrDataPoint.strObjectType &&\n          _objCurrDataPoint.strObjectType == 'action'\n        ) {\n          if (_objCurrDataPoint.strActionGroup == 'preprocess' &&\n            !_objCurrDataPoint.booPreProcessCollectionDone) {\n            _objCurrDataPoint.booPreProcessCollectionDone = true;\n            var _objPreProcessActionData = new PreProcessActionData(\n              _objCurrDataPoint,\n              _objWhatRawAssetDataFragment,\n              _objWhatAssetDataHolder\n            );\n            _arrPreProcessActions.push(_objPreProcessActionData);\n            _booCurrItemIsAction = true;\n          }\n        }\n        // Actions can't have child actions, so if we've found one then there's no point in checking\n        // descendant objects/arrays.\n        if (typeof _objCurrDataPoint === 'object' && !_booCurrItemIsAction) {\n          if (_objCurrDataPoint instanceof Array) {\n            localRecursiveCount = this._extractPreProcessActionsFromAssetArray(\n              _objCurrDataPoint,\n              _objWhatAssetDataHolder,\n              _arrPreProcessActions,\n              localRecursiveCount\n            );\n          } else {\n            localRecursiveCount = this._extractPreProcessActionsFromAssetObject(\n              _objCurrDataPoint,\n              _objWhatAssetDataHolder,\n              _arrPreProcessActions,\n              localRecursiveCount\n            );\n          }\n        }\n      }\n    }\n    return localRecursiveCount;\n  },\n\n  _extractPreProcessActionsFromAssetArray: function(\n    _arrWhatRawAssetDataFragment,\n    _objWhatAssetDataHolder,\n    _arrPreProcessActions,\n    recursiveCount\n  ) {\n    var localRecursiveCount = recursiveCount || 0;\n    var maxAttemptsToFindAction = 1000;\n    var count = 0;\n    while (count < _arrWhatRawAssetDataFragment.length) {\n      localRecursiveCount++;\n      if (localRecursiveCount > maxAttemptsToFindAction) {\n        console.log(\n          'ACTIONS_INTERACTIONS._extractPreProcessActionsFromAssetArray()' +\n          ' has exceeded it\\'s max attempts to find an action'\n        );\n        break;\n      }\n      var _objCurrDataPoint = _arrWhatRawAssetDataFragment[count];\n\n      if (\n        _objCurrDataPoint &&\n        _objCurrDataPoint.strObjectType &&\n        _objCurrDataPoint.strObjectType == 'action'\n      ) {\n        if (_objCurrDataPoint.strActionGroup == 'preprocess' &&\n          !_objCurrDataPoint.booPreProcessCollectionDone) {\n          _objCurrDataPoint.booPreProcessCollectionDone = true;\n          var _objPreProcessActionData = new PreProcessActionData(\n            _objCurrDataPoint,\n            _arrWhatRawAssetDataFragment,\n            _objWhatAssetDataHolder\n          );\n          _arrPreProcessActions.push(_objPreProcessActionData);\n        }\n      } else if (typeof _objCurrDataPoint === 'object') {\n        if (_objCurrDataPoint instanceof Array) {\n          localRecursiveCount = this._extractPreProcessActionsFromAssetArray(\n            _objCurrDataPoint,\n            _objWhatAssetDataHolder,\n            _arrPreProcessActions,\n            localRecursiveCount\n          );\n        } else {\n          localRecursiveCount = this._extractPreProcessActionsFromAssetObject(\n            _objCurrDataPoint,\n            _objWhatAssetDataHolder,\n            _arrPreProcessActions,\n            localRecursiveCount\n          );\n        }\n      }\n      count++;\n    }\n    return localRecursiveCount;\n  },\n\n  _flushQueue: function() {\n    if (this._arrActionsQueue.length < 1) {\n      this._booActiveQueue = false;\n      return;\n    }\n\n    this._booActiveQueue = true;\n    var objAction = this._arrActionsQueue.shift();\n\n    // Some jobs may not be possible/built due conflicts or data errors.\n    if (objAction.funActionJob) {\n      this.booWaitingForActionCallBack = true;\n      objAction.funActionJob(objAction.objActionData, objAction.objOptionalExtraData);\n    } else {\n      ACTIONS_INTERACTIONS._flushQueue();\n    }\n  },\n\n  // Some groups of actions may need to run a post process once, we want to call that after the\n  // group of actions have happened\n  _runDeferedTasks: function() {\n    for (var taskName in this._deferedTaskList) {\n      if (Object.prototype.hasOwnProperty.call(this._deferedTaskList, taskName)) {\n        var optionalData = this._deferedTaskList[taskName].optionalData || null;\n        this._deferedTaskList[taskName].taskFun(optionalData);\n      }\n    }\n    // Once all defered tasks and carried out, reset the object\n    this._deferedTaskList = {};\n  },\n\n  _setDeferedTask: function(taskObject) {\n    if (typeof this._deferedTaskList[taskObject.taskName] == 'undefined') {\n      this._deferedTaskList[taskObject.taskName] =\n        {taskFun: taskObject.taskFun, optionalData: taskObject.optionalData};\n    }\n  },\n\n  // ***************************************************************************************\n  debug: function(strMessage, intPriority, objCallerObject, booCalleeChain) {\n    if (DEBUG) {\n      DEBUG.lert(strMessage, intPriority, objCallerObject, booCalleeChain);\n    }\n  }\n};\n\nEM.register(ACTIONS_INTERACTIONS);\n\n/**\n * @public\n * @function PreProcessActionData\n * @param {Object} _objWhatActionData\n * @param {Object} _objWhatParentContainer\n * @param {Object} _objParentAssetDataHolder\n */\nfunction PreProcessActionData(_objWhatActionData,\n  _objWhatParentContainer, _objParentAssetDataHolder) {\n  this.objWhatActionData = _objWhatActionData;\n  this.objWhatParentContainer = _objWhatParentContainer;\n  this.objParentAssetDataHolder = _objParentAssetDataHolder;\n}\n"},function(e,n,t){t(0)(t(30))},function(e,n){e.exports="/* global ASSET_INTERACTIONS, SCREEN_INTERACTIONS, BOO_DYNAMIC_CONTINUOUS_SCROLLING, PREVIEW_DATA */\n/* global ISCROLL_INTERFACE, EM, BOTTOM_STRAP_RENDERER, CORE, OBJ_REF, _, $, TOPIC_MANAGER, MOBILE_DRAWER_MENU */\n/**\n * @title Display conditions\n * @description To be described.\n *\n * @author JC\n * @version 1.0 12-6-14\n */\n\nvar DISPLAY_CONDITIONS_INTERACTIONS =\n{\n  strObjID: 'Display conditions interactions',\n  strObjDescription: 'Handles the process of display conditions based either on initial or updated state of group and system variables', // eslint-disable-line max-len\n\n  _objCurrDataObjectToTest: null,\n\n  _objRegisteredObjects: {},\n  _objRegisteredObjectsByVariableName: {},\n  _objLinkedObjects: {},\n  registeredObjectsByLo: {},\n\n  _strPreProcessfunctionPrefix: '_preProcessDisplayConditionVariableName_',\n\n  handleEvent_systemVariablesChanged: function(_objEventData) {\n    var opts = {};\n    opts._arrChangedVariables = _objEventData['arrChangedSystemVariables'];\n    opts.suppressDomUpdates = _objEventData.suppressDomUpdates || false;\n\n    this._checkVariableBasedUpdates(opts);\n  },\n\n  handleEvent_groupVariableUpdated: function(_objEventData) {\n    var opts = {};\n    opts._arrChangedVariables = [];\n    opts._arrChangedVariables.push(_objEventData['strVariableName']);\n    opts.deferPostUpdateActions = _objEventData.deferPostUpdateActions || false;\n\n    this._checkVariableBasedUpdates(opts);\n  },\n\n  handleEvent_learningObjectiveUpdated: function(eventData) {\n    var options = {};\n    options.changedLearningObjectives = [];\n    options.changedLearningObjectives.push(eventData['learningObjectiveId']);\n    options.deferPostUpdateActions = eventData.deferPostUpdateActions || false;\n\n    this._checkLearningObjectiveBasedUpdates(options);\n  },\n\n  // Called on navigation creation, sets the initial state. Returns true if the state has changed.\n  setObjectsDisplayedState: function(currentItem, registerType, dynamicScreensItem) {\n    this._objCurrDataObjectToTest = currentItem;\n\n    var currentObjectId =\n      this._objCurrDataObjectToTest.strObjID || this._objCurrDataObjectToTest.strExtrasUniqueId;\n    if (currentItem.screenId) {\n      currentObjectId = this._objCurrDataObjectToTest.strExtrasId+'-'+currentItem.screenId;\n    }\n\n    // Allow reloading of assets/screens/topics etc... to overwrite the objReference\n    // as they may have loaded a new instance.\n    // ideally we need to reference the original objects, but we don't have time to fix\n    // this properly at the moment.\n    if (currentItem.screenId) {\n      this._objCurrDataObjectToTest.strExtrasUniqueId = currentObjectId;\n    }\n\n    this._addToLookupTables(registerType, dynamicScreensItem);\n\n    // Get the display conditions depending on location in object\n    var _arrDisplayConditions = null;\n    if (this._objCurrDataObjectToTest.arrDisplayConditions) {\n      _arrDisplayConditions = this._objCurrDataObjectToTest.arrDisplayConditions;\n    } else if (this._objCurrDataObjectToTest.objRawData\n      && this._objCurrDataObjectToTest.objRawData.arrDisplayConditions) {\n      _arrDisplayConditions = this._objCurrDataObjectToTest.objRawData.arrDisplayConditions;\n    } else if (this._objCurrDataObjectToTest.objDisplayConditions\n      && this._objCurrDataObjectToTest.objDisplayConditions.arrDisplayConditions.length) {\n      _arrDisplayConditions =\n      this._objCurrDataObjectToTest.objDisplayConditions.arrDisplayConditions;\n    }\n\n    // Update new asset data types\n    var newAssetDataStructure = ASSET_INTERACTIONS.getNewAsset(currentItem);\n\n    var _booCurrentDisplayState = currentItem.booIsDisplayed;\n    if (\n      newAssetDataStructure &&\n      newAssetDataStructure.data &&\n      !_.isUndefined(newAssetDataStructure.data.booIsDisplayed)\n    ) {\n      _booCurrentDisplayState = newAssetDataStructure.data.booIsDisplayed;\n    }\n\n    if (_arrDisplayConditions && _arrDisplayConditions.length > 0) {\n      var _useOrOperatorForDisplayConditions = false;\n      if ( typeof this._objCurrDataObjectToTest.objRawData !== 'undefined' &&\n        typeof this._objCurrDataObjectToTest.objRawData.useOrOperatorForDisplayConditions !==\n        'undefined' ) {\n        _useOrOperatorForDisplayConditions =\n          this._objCurrDataObjectToTest.objRawData.useOrOperatorForDisplayConditions;\n      } else if (typeof this._objCurrDataObjectToTest.useOrOperatorForDisplayConditions !==\n        'undefined') {\n        _useOrOperatorForDisplayConditions =\n          this._objCurrDataObjectToTest.useOrOperatorForDisplayConditions;\n      } else if (typeof this._objCurrDataObjectToTest.objDisplayConditions !== 'undefined' &&\n        typeof\n        this._objCurrDataObjectToTest.objDisplayConditions.useOrOperatorForDisplayConditions !==\n        'undefined') {\n        _useOrOperatorForDisplayConditions =\n          this._objCurrDataObjectToTest.objDisplayConditions.useOrOperatorForDisplayConditions;\n      }\n\n      currentItem.booIsDisplayed = this._areDisplayConditionsMet(\n        _arrDisplayConditions,\n        _useOrOperatorForDisplayConditions\n      );\n\n      if (newAssetDataStructure && newAssetDataStructure.data) {\n        newAssetDataStructure.data.booIsDisplayed = currentItem.booIsDisplayed;\n      }\n    } else {\n      currentItem.booIsDisplayed = true;\n\n      if (newAssetDataStructure && newAssetDataStructure.data) {\n        newAssetDataStructure.data.booIsDisplayed = true;\n      }\n    }\n\n    this._objCurrDataObjectToTest = null;\n\n    if (_booCurrentDisplayState !== currentItem.booIsDisplayed) {\n      return true;\n    }\n    return false;\n  },\n\n  getRegisteredVariableObjects: function() {\n    return this._objRegisteredObjectsByVariableName;\n  },\n\n  _checkVariableBasedUpdates: function(options) {\n    var _arrChangedSystemVariables = options._arrChangedVariables;\n\n    var _arrDisplayStateChangedScreens = [];\n    var _arrDisplayStateChangedAssets = [];\n    var _arrDisplayStateChangedNavs = [];\n\n    for (var i = 0; i < _arrChangedSystemVariables.length; i += 1) {\n      var _strCurrVariable = _arrChangedSystemVariables[i];\n      var registeredVariableTypes = this._objRegisteredObjectsByVariableName[_strCurrVariable];\n\n      if (typeof registeredVariableTypes !== 'undefined') {\n        if (registeredVariableTypes['screen']) {\n          _arrDisplayStateChangedScreens.push.apply(\n            _arrDisplayStateChangedScreens,\n            this._checkScreenUpdates(registeredVariableTypes['screen'])\n          );\n        }\n        if (registeredVariableTypes['asset']) {\n          _arrDisplayStateChangedAssets.push.apply(\n            _arrDisplayStateChangedAssets,\n            this._checkAssetUpdates(registeredVariableTypes['asset'])\n          );\n        }\n        if (registeredVariableTypes['navigation']) {\n          _arrDisplayStateChangedNavs.push.apply(\n            _arrDisplayStateChangedNavs,\n            this._checkNavigationUpdates(registeredVariableTypes['navigation'])\n          );\n        }\n      }\n    }\n\n    this._setChangedDisplayState(\n      options,\n      _arrDisplayStateChangedScreens,\n      _arrDisplayStateChangedAssets,\n      _arrDisplayStateChangedNavs\n    );\n  },\n\n  _checkLearningObjectiveBasedUpdates: function(options) {\n    var displayStateChangedScreens = [];\n    var displayStateChangedAssets = [];\n    var displayStateChangedNavs = [];\n\n    for (var i = 0; i < options.changedLearningObjectives.length; i += 1) {\n      var learningObjectiveId = options.changedLearningObjectives[i];\n      var registeredLearningObjectiveTypes = this.registeredObjectsByLo[learningObjectiveId];\n\n      if (typeof registeredLearningObjectiveTypes !== 'undefined') {\n        if (registeredLearningObjectiveTypes['screen']) {\n          displayStateChangedScreens.push.apply(\n            displayStateChangedScreens,\n            this._checkScreenUpdates(registeredLearningObjectiveTypes['screen'])\n          );\n        }\n        if (registeredLearningObjectiveTypes['asset']) {\n          displayStateChangedAssets.push.apply(\n            displayStateChangedAssets,\n            this._checkAssetUpdates(registeredLearningObjectiveTypes['asset'])\n          );\n        }\n        if (registeredLearningObjectiveTypes['navigation']) {\n          displayStateChangedNavs.push.apply(\n            displayStateChangedNavs,\n            this._checkNavigationUpdates(registeredLearningObjectiveTypes['navigation'])\n          );\n        }\n      }\n    }\n\n    this._setChangedDisplayState(\n      options,\n      displayStateChangedScreens,\n      displayStateChangedAssets,\n      displayStateChangedNavs\n    );\n  },\n\n  _setChangedDisplayState: function(options, changedScreens, changedAssets, changedNavs) {\n    var suppressDomUpdates = options.suppressDomUpdates || false;\n    var deferPostUpdateActions = options.deferPostUpdateActions || false;\n    var currentScreen;\n\n    if (changedScreens.length > 0 && suppressDomUpdates == false) {\n      currentScreen = SCREEN_INTERACTIONS.getShownScreenElement();\n      if (BOO_DYNAMIC_CONTINUOUS_SCROLLING) {\n        ISCROLL_INTERFACE.parseForContinuousScrollContentWrapper();\n      } else {\n        ISCROLL_INTERFACE.parseChildDOMElements(currentScreen);\n      }\n\n      EM.trigger(\n        'updateScreenDisplayStates',\n        {\n          'arrDisplayStateChangedScreens': changedScreens,\n          'deferPostUpdateActions': deferPostUpdateActions\n        }\n      );\n    }\n\n    if (changedAssets.length > 0 && suppressDomUpdates == false) {\n      currentScreen = SCREEN_INTERACTIONS.getShownScreenElement();\n      if (BOO_DYNAMIC_CONTINUOUS_SCROLLING) {\n        ISCROLL_INTERFACE.parseForContinuousScrollContentWrapper();\n      } else {\n        ISCROLL_INTERFACE.parseChildDOMElements(currentScreen);\n      }\n      EM.trigger(\n        'updateAssetDisplayStates',\n        {\n          'arrDisplayStateChangedAssets': changedAssets,\n          'deferPostUpdateActions': deferPostUpdateActions\n        }\n      );\n    }\n\n    if (changedNavs.length > 0 && suppressDomUpdates == false) {\n      if (MOBILE_DRAWER_MENU && gomo.outputChecker.isSmartPhone()) {\n        gomo.drawerMenu.buildMenu();\n      } else {\n        currentScreen = SCREEN_INTERACTIONS.getShownScreenElement();\n        BOTTOM_STRAP_RENDERER.rerenderNav(currentScreen);\n      }\n    }\n    setTimeout(function() {\n      $('.tempHiddenAssetC').removeClass('tempHiddenAssetC');\n    }, 50);\n  },\n\n  _checkScreenUpdates: function(registeredScreens) {\n    var changedStates = [];\n\n    if (registeredScreens && registeredScreens.length > 0) {\n      for (var i=0; i < registeredScreens.length; i++) {\n        var _objCurrLinkedScreen = registeredScreens[i];\n        var _booDisplayStateChanged = this.setObjectsDisplayedState(_objCurrLinkedScreen);\n        var _booIsRenderedScreen = this._isRenderedScreen(_objCurrLinkedScreen);\n        var _screenFoundInTopic =\n         TOPIC_MANAGER.isScreenInCurrentTopic(_objCurrLinkedScreen.strObjID);\n\n        if (_booDisplayStateChanged && _screenFoundInTopic) {\n          changedStates.push(_objCurrLinkedScreen);\n        } else if (_booDisplayStateChanged) {\n          this.checkLinkedObjects();\n        }\n      }\n    }\n\n    return changedStates;\n  },\n\n  setObjectsLinkedDisplayedState: function(objectData, objectEnabled) {\n    var assetId = objectData.strID || objectData.strObjID;\n    this._objLinkedObjects[assetId]= {\n      data: objectData,\n      enabled: objectEnabled\n    };\n  },\n\n  checkLinkedObjects: function() {\n    _.each(this._objLinkedObjects, function(asset) {\n      var enabled;\n      // New style assets\n      if (asset.data && asset.data.strID && gomo.assetManager.isRegistered(asset.data.strType)) {\n        // asset instance\n        var assetInstance = gomo.assetManager.findInstance(asset.data.strID);\n        // regular new asset type no params required for check enabled state\n        if (assetInstance === null) {\n          return;\n        }\n        // Some assets have complicated actions that require bespoke checks\n        if (assetInstance.handleOwnEnabledState) {\n          assetInstance.checkAndHandleEnabledState();\n          return;\n        } else {\n          enabled = assetInstance.checkEnabledState();\n          if (enabled != asset.enabled) {\n            asset.enabled = enabled;\n            assetInstance.switchState(asset.data, asset.enabled);\n          }\n        }\n      // sub assets like the ones in image markers\n      } else if (asset.data && asset.data.strID\n        && asset.data.strID.indexOf('suba') > -1) {\n        var parentID = asset.data.strID.split('suba')[0];\n        var parentAsset = gomo.assetManager.findInstance(parentID);\n        if (parentAsset != null) {\n          enabled = parentAsset.checkEnabledState(asset.data);\n          if (enabled != asset.enabled) {\n            asset.enabled = enabled;\n            parentAsset.switchState(asset.data, asset.enabled);\n          }\n        }\n      } else {\n        // Old style assets\n        enabled = ASSET_INTERACTIONS.checkEnabledState(asset.data);\n        if (enabled != asset.enabled) {\n          asset.enabled = enabled;\n          ASSET_INTERACTIONS.switchAssetState(asset.data, asset.enabled);\n        }\n      }\n    });\n  },\n\n  _checkAssetUpdates: function(registeredAssets) {\n    var changedStates = [];\n\n    if (registeredAssets && registeredAssets.length > 0) {\n      var iCount = 0;\n      while (iCount < registeredAssets.length) {\n        var _objCurrLinkedAsset = registeredAssets[iCount];\n\n        var _booDisplayStateChanged = this.setObjectsDisplayedState(_objCurrLinkedAsset);\n        var _booIsRenderedAsset = this._isRenderedAsset(_objCurrLinkedAsset);\n\n        if ((_booDisplayStateChanged) && (_booIsRenderedAsset)) {\n          changedStates.push(_objCurrLinkedAsset);\n        }\n\n        iCount++;\n      }\n    }\n\n    return changedStates;\n  },\n\n  _checkNavigationUpdates: function(registeredNavs) {\n    var changedStates = [];\n\n    if (registeredNavs && registeredNavs.length > 0) {\n      var iCount = 0;\n      while (iCount < registeredNavs.length) {\n        var registeredItem = registeredNavs[iCount];\n\n        var _booDisplayStateChanged = this.setObjectsDisplayedState(registeredItem);\n        var _booIsRendered = this._isRenderedNavigation(registeredItem);\n\n        if ((_booDisplayStateChanged) && (_booIsRendered)) {\n          changedStates.push(registeredItem);\n        }\n\n        iCount++;\n      }\n    }\n\n    return changedStates;\n  },\n\n  // Tests each of the display conditions applied to an object and returns the overall result\n  _areDisplayConditionsMet: function(_arrDisplayConditions, _useOrOperatorForDisplayConditions) {\n    var _booShouldBeVisible = true;\n    var _arrCheckedConditions = [];\n\n    for (var i = 0; i < _arrDisplayConditions.length; i++) {\n      var _objCurrCondition = _arrDisplayConditions[i];\n      var _strConditionType = _objCurrCondition.strType;\n\n      if (_objCurrCondition.objParameters && _strConditionType) {\n        if (this['_checkCondition_' + _strConditionType]) {\n          var _booConditionResult = this['_checkCondition_' + _strConditionType](_objCurrCondition);\n\n          _arrCheckedConditions.push(_booConditionResult);\n        } else {\n          alert('ERROR: I was asked to test a display condition on type \\''\n            + _strConditionType\n            + '\\', however I have no method with which to do so. _areDisplayConditionsMet(), '\n            + 'display_conditions.js');\n        }\n      }\n    }\n\n    if (_useOrOperatorForDisplayConditions) {\n      _booShouldBeVisible = _.contains(_arrCheckedConditions, true);\n    } else {\n      _booShouldBeVisible = !_.contains(_arrCheckedConditions, false);\n    }\n    return _booShouldBeVisible;\n  },\n\n  /**\n  * Some screens are specifically set to 'booIsDisplayed: false' and we need to stop state updates on these\n   */\n  _isScreenDisplayed: function(screenData){\n      // If the screen has a state set then use it, otherwise assume visible\n      var isScreenVisible = true;\n      if (!screenData.strObjID) {\n        return isScreenVisible;\n      }\n      // Get the origin data as the display_conditions data may be stale\n      var originScreenData = OBJ_REF.get(screenData.strObjID);\n\n      if (originScreenData && originScreenData.strObjType\n      && originScreenData.strObjType === 'screen'\n      && typeof originScreenData.booIsDisplayed === 'boolean') {        \n        isScreenVisible = originScreenData.booIsDisplayed;\n      }\n      return isScreenVisible;\n  },\n\n  _isRenderedScreen: function(_objWhatScreen) {\n    var _objParentTopic = _objWhatScreen.objParent;\n    var isScreenVisible = this._isScreenDisplayed(_objWhatScreen);\n\n    var _objCurrTopic = CORE.getCurrentCourseObject();\n    if (_objParentTopic.strObjID == _objCurrTopic.strObjID && isScreenVisible) {\n      return true;\n    }\n    return false;\n  },\n\n  _isRenderedAsset: function(_objWhatAsset) {\n    var _objParentTopic;\n    var _objParentScreen;\n    if (_objWhatAsset.objParent.objParent.strObjType == 'topic'\n      || _objWhatAsset.objParent.objParent.strObjTopicModel == 'meta') {\n      _objParentTopic = _objWhatAsset.objParent.objParent;\n      _objParentScreen = _objWhatAsset.objParent;\n    } else {\n      _objParentTopic = _objWhatAsset.objParent.objParent.objParent;\n      _objParentScreen = _objWhatAsset.objParent.objParent;\n    }\n\n    var parentScreenVisible = true;\n    if (_objParentScreen) {\n      parentScreenVisible = this._isScreenDisplayed(_objParentScreen);\n    }\n\n    var _objCurrTopic = CORE.getCurrentCourseObject();\n    if (_objParentTopic.strObjID == _objCurrTopic.strObjID && parentScreenVisible) {\n      return true;\n    }\n    return false;\n  },\n\n  _isRenderedNavigation: function(navigationItem) {\n    var navigationItemScreen = OBJ_REF.get(navigationItem.screenId);\n    var parentTopic = navigationItemScreen.objParent;\n\n    var _objCurrTopic = CORE.getCurrentCourseObject();\n    if (parentTopic.strObjID == _objCurrTopic.strObjID) {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * Adds objects to the appropriate lookup tables, a variable name or a learning objective based\n   * lookup which contains arrays of objects\n   * @param {string} registerType Display condition target (asset|navigation)\n   */\n  _addToLookupTables: function(registerType, dynamicScreensItem) {\n    var currentObjectId =\n      this._objCurrDataObjectToTest.strObjID || this._objCurrDataObjectToTest.strExtrasUniqueId;\n    this._objRegisteredObjects[currentObjectId] = this._objCurrDataObjectToTest;\n\n    var _arrDisplayConditions = null;\n    if (this._objCurrDataObjectToTest.arrDisplayConditions) {\n      _arrDisplayConditions = this._objCurrDataObjectToTest.arrDisplayConditions;\n    } else if (this._objCurrDataObjectToTest.objRawData\n      && this._objCurrDataObjectToTest.objRawData.arrDisplayConditions) {\n      _arrDisplayConditions = this._objCurrDataObjectToTest.objRawData.arrDisplayConditions;\n    } else if (this._objCurrDataObjectToTest.objDisplayConditions &&\n      this._objCurrDataObjectToTest.objDisplayConditions.arrDisplayConditions.length) {\n      _arrDisplayConditions =\n      this._objCurrDataObjectToTest.objDisplayConditions.arrDisplayConditions;\n    }\n\n    if (_arrDisplayConditions && _arrDisplayConditions.length > 0) {\n      var count = 0;\n      while (count < _arrDisplayConditions.length) {\n        var _objCurrDisplayCondition = _arrDisplayConditions[count];\n        if (_objCurrDisplayCondition.objParameters) {\n          this.addToVariablesLookupTable(\n            registerType,\n            _objCurrDisplayCondition,\n            dynamicScreensItem\n          );\n\n          this.addToLearningObjectiveLookupTable(\n            registerType,\n            _objCurrDisplayCondition.objParameters.strLearningObjectiveToCheck\n          );\n        }\n        count++;\n      }\n    }\n  },\n\n  /**\n   * Adds a variable display condition to the look up table\n   * @param {string} type Display condition target (asset|navigation)\n   * @param {object} displayCondition Display condition data\n   */\n  addToVariablesLookupTable: function(type, displayCondition, dynamicScreensItem) {\n    var me = this;\n    var variableName = displayCondition.objParameters.strVariableToCheck;\n\n    if (type && (variableName || variableName === 0)) {\n      var variableToTestAgainst = variableName;\n      var _strPreProcessFunctionToTestFor =\n        me._strPreProcessfunctionPrefix + variableToTestAgainst.replace(/-/g, '_');\n\n      if (me[_strPreProcessFunctionToTestFor]) {\n        variableToTestAgainst =\n          me[_strPreProcessFunctionToTestFor](displayCondition);\n      }\n\n      if (!me._objRegisteredObjectsByVariableName[variableToTestAgainst]) {\n        me._objRegisteredObjectsByVariableName[variableToTestAgainst] = {};\n        me._objRegisteredObjectsByVariableName[variableToTestAgainst][type] = [];\n      } else if (!me._objRegisteredObjectsByVariableName[variableToTestAgainst][type]) {\n        me._objRegisteredObjectsByVariableName[variableToTestAgainst][type] = [];\n      }\n\n      if ((type === 'screen' || type === 'asset' )\n        && me.idAlreadyRegisteredAgainstVariable(type, variableToTestAgainst)) {\n        if (dynamicScreensItem || (PREVIEW_DATA && PREVIEW_DATA.editorMode)) {\n          me.reRegisterItemAgainstVariable(type, variableToTestAgainst);\n        }\n        return;\n      }\n\n      me._objRegisteredObjectsByVariableName[variableToTestAgainst][type].push(\n        me._objCurrDataObjectToTest\n      );\n    }\n  },\n\n  idAlreadyRegisteredAgainstVariable: function(type, variableToTestAgainst) {\n    var me = this;\n    return me.locateOrReRegisterAgainstVariable(type, variableToTestAgainst, false);\n  },\n\n  /**\n   * Re-register dynamic screen items as they have new instances\n   */\n  reRegisterItemAgainstVariable: function(type, variableToTestAgainst) {\n    var me = this;\n    me.locateOrReRegisterAgainstVariable(type, variableToTestAgainst, true);\n  },\n\n  /**\n   * Logic for iterating through registered objects\n   */\n  locateOrReRegisterAgainstVariable: function(type, variableToTestAgainst, reregister) {\n    var me = this;\n\n    if (!me._objCurrDataObjectToTest\n      || (!me._objCurrDataObjectToTest.strObjID && !me._objCurrDataObjectToTest.strID)) {\n      return false;\n    }\n    var dataItemId = me._objCurrDataObjectToTest.strObjID || me._objCurrDataObjectToTest.strID;\n    var registeredObjects = me._objRegisteredObjectsByVariableName[variableToTestAgainst];\n    var dataItem = null;\n\n    for (var regIndex in registeredObjects[type]) {\n      if (Object.prototype.hasOwnProperty.call(registeredObjects[type], regIndex)) {\n        dataItem = registeredObjects[type][regIndex];\n        if (dataItem.strObjID && dataItem.strObjID === dataItemId) {\n          // If the data item is from a dynamic screen we will have a new instance and need to overwrite\n          if (reregister) {\n            registeredObjects[type][regIndex] = me._objCurrDataObjectToTest;\n          }\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Adds a learning objective display condition to the look up table\n   * @param {string} type Display condition target (asset|navigation)\n   * @param {string} loId Learning objective ID\n   */\n  addToLearningObjectiveLookupTable: function(type, loId) {\n    var me = this;\n    if (type && loId) {\n      if (!me.registeredObjectsByLo[loId]) {\n        me.registeredObjectsByLo[loId] = {};\n        me.registeredObjectsByLo[loId][type] = [];\n      } else if (!me.registeredObjectsByLo[loId][type]) {\n        me.registeredObjectsByLo[loId][type] = [];\n      }\n      me.registeredObjectsByLo[loId][type].push(\n        me._objCurrDataObjectToTest\n      );\n    }\n  },\n\n  /**\n   * Returns the result of the comparison of two variables\n   * @param {string} _strComparisonType The comparison type\n   * @param {string|number} _strValueToTestAgainst Value to test against\n   * @param {string|number} _strCurrVariableValue Current variable value\n   * @return {boolean}\n   */\n  _performStandardValueComparison: function(\n    _strComparisonType,\n    _strValueToTestAgainst,\n    _strCurrVariableValue\n  ) {\n    var result = true;\n    var _objNormalisedValueToTestAgainst = this._normaliseVariableValue(_strValueToTestAgainst);\n    var _objNormalisedVariableValue = this._normaliseVariableValue(_strCurrVariableValue);\n\n    switch (_strComparisonType) {\n      case 'equal':\n        result = _objNormalisedValueToTestAgainst == _objNormalisedVariableValue;\n        break;\n      case 'not_equal':\n        result = _objNormalisedValueToTestAgainst != _objNormalisedVariableValue;\n        break;\n      // Greather_than typo has been fixed in code, but may be in some peoples data, so leaving the case.\n      case 'greather_than':\n      case 'greater_than':\n        result = _objNormalisedVariableValue > _objNormalisedValueToTestAgainst;\n        break;\n      case 'greater_than_or_equal':\n        result = _objNormalisedVariableValue >= _objNormalisedValueToTestAgainst;\n        break;\n      case 'less_than':\n        result = _objNormalisedVariableValue < _objNormalisedValueToTestAgainst;\n        break;\n      case 'less_than_or_equal':\n        result = _objNormalisedVariableValue <= _objNormalisedValueToTestAgainst;\n        break;\n      // Always use the source variable for contains as it will produce an error if it's a number.\n      case 'contains':\n        result = _strCurrVariableValue.indexOf(_strValueToTestAgainst) > -1;\n        break;\n      default:\n        alert('ERROR: Unknown comparison type of \\''\n          + _strComparisonType\n          + '\\' found in ._performStandardValueComparison(), display_conditions.js');\n        // Show items by default if we don't know how to handle the condition fully.\n        result = true;\n        break;\n    }\n\n    return result;\n  },\n\n  _normaliseVariableValue: function(_strWhatVariable) {\n    var _floVariableCastAsNumber = parseInt(_strWhatVariable);\n\n    // If it's a NaN value then it isn't a number so return the base value\n    if (isNaN(_floVariableCastAsNumber)) {\n      if (_strWhatVariable) {\n        var regEx = /&#([\\d\\w]{5});/gi;\n        var variableClean = _strWhatVariable.replace(regEx, function(match, grp) {\n          return String.fromCharCode(parseInt(0+grp, 16));\n        } );\n        // remove special characters\n        regEx = /&([\\d\\w]{4});/gi;\n        variableClean = variableClean.replace(regEx, '' );\n\n        variableClean = unescape(variableClean);\n      }\n\n      return variableClean;\n    }\n    // If the length has been reduced then the user probably didn't\n    // intend it to be compared as a number, so again stick with the\n    // base value.\n    if (_floVariableCastAsNumber.toString().length != _strWhatVariable.length) {\n      return _strWhatVariable;\n    }\n\n    return _floVariableCastAsNumber;\n  },\n\n  booTerminal: true\n};\n\nEM.register(DISPLAY_CONDITIONS_INTERACTIONS);\n"},function(e,n,t){t(0)(t(32))},function(e,n){e.exports="/* eslint-disable no-unused-vars, no-undef */\n\n/**\n * @title Constants\n * @description To be described.\n *\n *\n * @author GoMo\n * @version 2.0 17/12/12\n */\n\nif (!PREVIEW_DATA.authoringMode) {\n  if (document.location.href.indexOf('?') == -1) {\n    BASE_ROOT_PATH = document.location.href.slice(0, document.location.href.lastIndexOf('/') + 1);\n  } else {\n    var pathSplit = document.location.href.split('?');\n    BASE_ROOT_PATH = pathSplit[0].slice(0, pathSplit[0].lastIndexOf('/') + 1);\n  }\n}\n\n// Both of these are re-checked to allow for debug overrides.\nvar STR_PROJECT_SERVER_PATH = 'projects/project_' + STR_PROJECT_ID + '/';\nvar STR_FULL_SERVER_PATH = STR_BASE_SERVER_PATH + STR_PROJECT_SERVER_PATH;\n\n// Set this to the server path for dynamic loading.\nvar ROOT_PATH = BASE_ROOT_PATH;\n\nvar STR_LOCAL_DATA_PATH = 'data/';\nvar STR_LOCAL_RESOURCES_PATH = 'resources/';\n\nvar STR_PAGE_SEPERATOR = ' / ';\n\nvar INT_UNVISITED = 0;\nvar INT_VISITED = 1;\nvar INT_COMPLETED = 2;\n\nvar INT_TRANSITION_TIMER = 750;\n"}]);