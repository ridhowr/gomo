!function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=176)}({0:function(t,e){t.exports=function(t){function e(t){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",t)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(t):"undefined"!=typeof eval?eval.call(null,t):e("EvalError: No eval function available")}catch(t){e(t)}}},176:function(t,e,n){"use strict";n.r(e);n(177),n(179)},177:function(t,e,n){n(0)(n(178))},178:function(t,e){t.exports="var global = this;\n\n/**\n * Generic error handler\n * will pass all errors to the releavnt reporting methods.\n *\n *\n * Produces standrad error object:\n *\n * {\n *\t\turl: (String),\n *\t\tcol: (Number),\n *\t\tline: (Number),\n *\t\tmessage: (String),\n *\t\terror: (Object),\n *\t\tstack: (Object)\n *\t}\n *\n */\nglobal.ErrorHandler = (function(LogManager, StackTrace){\n\t\t\n\t\t/**\n\t\t * Error handling\n\t\t */\n\t\tvar ErrorHandler = function() {\n\n\t\t\tvar me = this;\n\t\t\t/**\n\t\t\t * Capture and un-caught errors!\n\t\t\t */\n\t\t\twindow.onerror = function(message, url, line, col, err) {\n\t\t\t\t// Build the error object!\n\t\t\t\tme.build(message, url, line, col, err, function(error) {\n\t\t\t\t\t// Process it...\n\t\t\t\t\tme.process(error);\n\t\t\t\t});\n\t\t\t\treturn true;\n\t\t\t};\n\t\t}\n\n\t\tErrorHandler.prototype = {\n\n\t\t\t/**\n\t\t\t * Method to be used from catch block to process and log error...\n\t\t\t */\n\t\t\tcatch: function(err) {\n\t\t\t\tvar me = this;\n\t\t\t\t// Build the error object!\n\t\t\t\tme.build(null, null, null, null, err, function(error) {\n\t\t\t\t\t// Process it...\n\t\t\t\t\tme.process(error);\n\t\t\t\t})\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Build custom error object\n\t\t\t */\n\t\t\tbuild: function(message, url, line, col, err, callback) {\n\t\t\t\tvar me = this;\n\t\t\t\t// Parse the error object!\n\t\t\t\tme.parseError((err || null), function(stack) {\n\t\t\t\t\tvar frameOne = stack && stack.length ? stack[0] : {};\n\n\t\t\t\t\t// Return the custom error object\n\t\t\t\t\tcallback({\n\t\t\t\t\t\turl: url || frameOne.fileName || '',\n\t\t\t\t\t\tcol: col || frameOne.columnNumber || 0,\n\t\t\t\t\t\tline: line || frameOne.lineNumber || '',\n\t\t\t\t\t\tmessage: message || frameOne.source || '',\n\t\t\t\t\t\terror: err || null,\n\t\t\t\t\t\tstack: stack || null\n\t\t\t\t\t})\n\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Parse the error object!\n\t\t\t */\n\t\t\tparseError: function(error, callback) {\n\t\t\t\tcallback = callback || function(){};\n\t\t\t\tif(error) {\n\t\t\t\t\t// Get the stack from the error object\n\t\t\t\t\tStackTrace.fromError(error)\n\t\t\t\t\t\t.then(callback)\n\t\t\t\t\t\t.catch(callback)\n\t\t\t\t} else {\n\t\t\t\t\t// Callback\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Parse the error object!\n\t\t\t */\n\t\t\tprocess: function(error) {\n\t\t\t\tif(global.LogManager) {\n\t\t\t\t\tglobal.LogManager.add('ERROR', error);\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t};\n\n\t\t// Return and instance...\n\t\treturn new ErrorHandler();\n\n})(global.LogManager, global.StackTrace);"},179:function(t,e,n){n(0)(n(180))},180:function(t,e){t.exports="var global = this;\n\nglobal.LogManager = (function(){\n\n\t\t/**\n\t\t * Create the LogManager!!\n\t\t */\n\t\tvar LogManager = function() {\n\t\t\tvar me = this;\n\t\t\tme.config =  {\n\t\t\t\t//endpoint: 'console',\n\t\t\t\tendpoint: 'api'\n\t\t\t\t//api: {\n\t\t\t\t\t// url: '',\n\t\t\t\t\t// port: '',\n\t\t\t\t\t// auth: ''\n\t\t\t\t//}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Console log a message\n\t\t */\n\t\tvar consoleMessage = function(message) {\n\t\t\tvar method = 'log';\n\t\t\tmethod = message.type == 'ERROR' ? 'error' : 'log';\n\n\t\t\t// console.log or console.error the message and objects!\n\t\t\tif(console && console[method]) {\n\t\t\t\tif(message.text) {\n\t\t\t\t\tconsole[method](message.text);\n\t\t\t\t\tif(message.objects && message.objects.length) {\n\t\t\t\t\t\tfor(var i=0; i<message.objects.length; i++) {\n\t\t\t\t\t\t\tif(message.objects[i]) {\n\t\t\t\t\t\t\t\tconsole[method](message.objects[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar Message = function() {\n\t\t\tvar me = this;\n\t\t\tme.type = 'LOG';\n\t\t\tme.text = '';\n\t\t\tme.objects = [];\n\t\t\tme.date = new Date();\n\t\t}\n\n\n\t\t// LogManager\n\t\tLogManager.prototype = {\n\n\t\t\t/**\n\t\t\t * Add message to log...\n\t\t\t */\n\t\t\tadd: function(type, obj) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar message = {};\n\t\t\t\tswitch(type) {\n\t\t\t\t\tcase 'TEXT':\n\t\t\t\t\t\tmessage = me.processText(obj);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ERROR':\n\t\t\t\t\t\tmessage = me.processError(obj);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmessage = me.processObject(obj);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Process and send the message\n\t\t\t\tme.processMessage(message);\n\t\t\t\tme.sendMessage(message);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Process the error object\n\t\t\t */\n\t\t\tprocessError: function(error) {\n\t\t\t\tvar message = new Message();\n\n\t\t\t\tif(error && error !== undefined) {\n\t\t\t\t\tmessage.type = 'ERROR';\n\t\t\t\t\tmessage.text = 'Error (' + error.url + ' ' + error.line + ',' + error.col + '): ' + error.message;\n\t\t\t\t\tmessage.objects = [\n\t\t\t\t\t\t(error.stack || error.error)\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t\treturn message;\n\t\t\t},\n\n\t\t\tprocessText: function(text) {\n\t\t\t\tvar message = new Message();\n\t\t\t\tmessage.text = text;\n\t\t\t\treturn message;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Process a generic object\n\t\t\t */\n\t\t\tprocessObject: function(obj) {\n\t\t\t\tvar message = {};\n\t\t\t\tmessage.objects = [obj];\n\t\t\t\treturn message;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Process the message\n\t\t\t * Add details such as the datetime etc etc.\n\t\t\t */\n\t\t\tprocessMessage: function(message) {\n\t\t\t\tvar me = this;\n\t\t\t\tvar logMessageOutput = '[session : unknown]';\n\t\t\t\tif(me.logMessageData){\n\t\t\t\t\tvar lmd = me.logMessageData;\n\t\t\t\t\tlogMessageOutput = '[userId : '+lmd.playerUserId+'] [projectId : '+lmd.playerProjectId+'] [topicId : '+lmd.playerTopicId+'] [screenId : '+lmd.playerScreenId+']';\n\t\t\t\t}\n\t\t\t\t// Any generic processing...\n\t\t\t\tif(message.text) {\n\t\t\t\t\tmessage.text = '[gomo-player] '+logMessageOutput+' [' + message.date.toISOString() + '] - ' + message.text;\n\t\t\t\t}\n\t\t\t\t// Add stack\n\t\t\t\tif (typeof opts !== \"undefined\") {\n\t\t\t\t\tif (opts.includeStack) {\n\t\t\t\t\t\tvar depth = 20;\n\t\t\t\t\t\tvar stack = StackTrace.getSync();\n\t\t\t\t\t\t\tvar stackMessage = \" \\nStack:\\n\";\n\t\t\t\t\t\tif (typeof opts.depth !== \"undefined\") {\n\t\t\t\t\t\t\tdepth = opts.depth;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif (stack.length < depth) {\n\t\t\t\t\t\t\t\tdepth = stack.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (var i=0; i<depth; i++) {\n\t\t\t\t\t\t\tstackMessage += stack[i].source + '\\n';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmessage.text += stackMessage;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn message;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Send the message to the relevant endpoint\n\t\t\t */\n\t\t\t sendMessage: function(message) {\n\t\t\t \tvar me = this;\n\t\t\t \t// Check we have an endpoint setting...\n\t\t\t \tif(me.config && me.config.endpoint) {\n\t\t\t \t\t// Select the appropriate output.\n\t\t\t\t \tswitch(me.config.endpoint) {\n\t\t\t\t \t\tcase 'api':\n\t\t\t\t \t\t\t// Go make API call - ELK, etc etc.\n\t\t\t\t \t\t\tif(logit){\n\t\t\t\t \t\t\t\tswitch(message.type) {\n\t\t\t\t\t\t\t\t\tcase 'LOG':\n\t\t\t\t\t\t\t\t\t\tlogit.log(message.text, me.logMessageData);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 'ERROR':\n\t\t\t\t\t\t\t\t\t\tlogit.error(message.text, me.logMessageData);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tlogit.log(message.text, me.logMessageData);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t \t\t\t}\n\t\t\t\t \t\t\tbreak;\n\t\t\t\t \t\tcase 'console':\n\t\t\t\t \t\tdefault:\n\t\t\t\t \t\t\tconsoleMessage(message);\n\t\t\t\t \t\t\tbreak;\n\t\t\t\t \t}\n\t\t\t\t }\n\t\t\t },\n\n\t\t\t /**\n\t\t\t * Create data to be supplied with all logs\n\t\t\t * argument is optional if it needs to overriden in the future\n\t\t\t */\n\t\t\tsetLogMessageData: function(setLogMessageData) {\n\t\t\t\tvar me = this;\n\t\t\t\t//Set as an object if it doesn't exist\n\t\t\t\tsetLogMessageData = setLogMessageData || {};\n\n\t\t\t\t//Update the topic ID if we've already set the log data\n\t\t\t\tif(me.logMessageData){\n\t\t\t\t\t//Get current topic if available\n\t\t\t\t\tvar currentTopic = TOPIC_MANAGER.getCurrentTopic();\n\t\t\t\t\tvar currentTopicId = null;\n\t\t\t\t\tif(currentTopic){\n\t\t\t\t\t\tcurrentTopicId = currentTopic.strObjID;\n\t\t\t\t\t}\n\t\t\t\t\t//Get current screen if available\n\t\t\t\t\tvar currentScreen = SCREEN_INTERACTIONS.getCurrentScreenData();\n\t\t\t\t\tvar currentScreenId = null;\n\t\t\t\t\tif(currentScreen){\n\t\t\t\t\t\tcurrentScreenId = currentScreen.strObjID;\n\t\t\t\t\t}\n\t\t\t\t\t//Use the updated data, or fall back to previous data or data is unknown.\n\t\t\t\t\tme.logMessageData.playerTopicId = setLogMessageData.topicId || currentTopicId || 'unknown';\n\t\t\t\t\tme.logMessageData.playerScreenId = setLogMessageData.screenId || currentScreenId || 'unknown';\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tvar userId = setLogMessageData.userId || CONTENT_TRACKING.getUserId() || 'unknown';\n\t\t\t\t\tvar projectId = setLogMessageData.projectId || CORE.objCourseData.strObjID || 'unknown';\n\t\t\t\t\tvar topicId = setLogMessageData.topicId || 'unknown';\n\t\t\t\t\tvar screenId = setLogMessageData.screenId || 'unknown';\n\t\t\t\t\tvar deviceType = OUTPUT_MODE_CHECKER.getDeviceType();\n\t\t\t\t\tvar os = OUTPUT_MODE_CHECKER.getClientOs();\n\t\t\t\t\tvar browserName = OUTPUT_MODE_CHECKER.getBrowserName();\n\t\t\t\t\tvar useragent = navigator.userAgent || 'unknown';\n\t\t\t\t\tvar browserVersion = OUTPUT_MODE_CHECKER.getBrowserVersion();\n\n\t\t\t\t\tme.logMessageData =  {\n\t\t\t\t\t\t\"playerUserId\" : userId,\n\t\t\t\t\t\t\"playerProjectId\" : projectId,\n\t\t\t\t\t\t\"playerTopicId\" : topicId,\n\t\t\t\t\t\t\"playerScreenId\" : screenId,\n\t\t\t\t\t\t\"playerBrowserName\" : browserName,\n\t\t\t\t\t\t\"playerBrowserVersion\" : browserVersion,\n\t\t\t\t\t\t\"playerUseragent\" : useragent,\n\t\t\t\t\t\t\"playerDeviceType\" : deviceType,\n\t\t\t\t\t\t\"playerOs\" : os\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Return and instance...\n\t\treturn new LogManager();\n})();\n"}});